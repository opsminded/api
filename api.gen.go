//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerHttpAuthenticationScopes = "bearerHttpAuthentication.Scopes"
)

// Edge Um relacionamento entre recursos
type Edge struct {
	// Class Classe ou Categoria do relacionamento
	Class string `json:"class"`

	// Key Identificador único do relacionamento
	Key string `json:"key"`

	// Label Nome do relacionamento que será exibido
	Label string `json:"label"`

	// Source Label único do recurso de origem
	Source string `json:"source"`

	// Target Label único do recurso de destino
	Target string `json:"target"`
}

// Subgraph Recursos e seus relacionamentos apresentados de forma útil para consumo e visualização.
type Subgraph struct {
	// All Se verdadeiro, retorna todos os itens do grafo, mesmo que não estejam conectados diretamente.
	All bool `json:"all"`

	// Edges Lista de relacionamentos que devem ser exibidos no grafo
	Edges []Edge `json:"edges"`

	// Highlights Elementos que devem ser destacados no grafo
	Highlights []Vertex `json:"highlights"`

	// Principal Um ativo de TI
	Principal Vertex `json:"principal"`

	// Title Nome que será exibido para a sessão do grafo
	Title string `json:"title"`

	// Vertices Lista de recursos que devem ser exibidos no grafo
	Vertices []Vertex `json:"vertices"`
}

// Summary Um sumário sobre o estado da infraestrutura
type Summary struct {
	// TotalEdges O número total de relacionamentos presentes na base
	TotalEdges int `json:"total_edges"`

	// TotalVertices O número total de recursos presentes na base
	TotalVertices int `json:"total_vertices"`

	// UnhealthyVertices Lista de recursos não saudáveis
	UnhealthyVertices []Vertex `json:"unhealthy_vertices"`
}

// Vertex Um ativo de TI
type Vertex struct {
	// Healthy Saúde do recurso. Um recurso pode não estar saudável por causa de um de suas dependências.
	Healthy bool `json:"healthy"`

	// Key identificador único do recurso
	Key string `json:"key"`

	// Label Nome que será exibido
	Label string `json:"label"`

	// LastCheck O timestamp da última verificação
	LastCheck string `json:"last_check"`
}

// VertexAttrubutes Lista de atributos do recurso
type VertexAttrubutes = []struct {
	// Description Descrição do atributo
	Description string `json:"description"`

	// Type Tipo do atributo
	Type string `json:"type"`

	// Value Valor do atributo, que pode ser string, número ou booleano
	Value VertexAttrubutes_Value `json:"value"`
}

// VertexAttrubutesValue0 defines model for .
type VertexAttrubutesValue0 = string

// VertexAttrubutesValue1 defines model for .
type VertexAttrubutesValue1 = int

// VertexAttrubutesValue2 defines model for .
type VertexAttrubutesValue2 = bool

// VertexAttrubutes_Value Valor do atributo, que pode ser string, número ou booleano
type VertexAttrubutes_Value struct {
	union json.RawMessage
}

// Key defines model for key.
type Key = string

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// GetVertexDependenciesParams defines parameters for GetVertexDependencies.
type GetVertexDependenciesParams struct {
	// All Se verdadeiro, retorna todas as dependências do recurso, mesmo que não estejam conectadas diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// GetVertexDependentsParams defines parameters for GetVertexDependents.
type GetVertexDependentsParams struct {
	// All Se verdadeiro, retorna todos os dependentes do recurso, mesmo que não estejam conectados diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// AsVertexAttrubutesValue0 returns the union data inside the VertexAttrubutes_Value as a VertexAttrubutesValue0
func (t VertexAttrubutes_Value) AsVertexAttrubutesValue0() (VertexAttrubutesValue0, error) {
	var body VertexAttrubutesValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVertexAttrubutesValue0 overwrites any union data inside the VertexAttrubutes_Value as the provided VertexAttrubutesValue0
func (t *VertexAttrubutes_Value) FromVertexAttrubutesValue0(v VertexAttrubutesValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVertexAttrubutesValue0 performs a merge with any union data inside the VertexAttrubutes_Value, using the provided VertexAttrubutesValue0
func (t *VertexAttrubutes_Value) MergeVertexAttrubutesValue0(v VertexAttrubutesValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVertexAttrubutesValue1 returns the union data inside the VertexAttrubutes_Value as a VertexAttrubutesValue1
func (t VertexAttrubutes_Value) AsVertexAttrubutesValue1() (VertexAttrubutesValue1, error) {
	var body VertexAttrubutesValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVertexAttrubutesValue1 overwrites any union data inside the VertexAttrubutes_Value as the provided VertexAttrubutesValue1
func (t *VertexAttrubutes_Value) FromVertexAttrubutesValue1(v VertexAttrubutesValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVertexAttrubutesValue1 performs a merge with any union data inside the VertexAttrubutes_Value, using the provided VertexAttrubutesValue1
func (t *VertexAttrubutes_Value) MergeVertexAttrubutesValue1(v VertexAttrubutesValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVertexAttrubutesValue2 returns the union data inside the VertexAttrubutes_Value as a VertexAttrubutesValue2
func (t VertexAttrubutes_Value) AsVertexAttrubutesValue2() (VertexAttrubutesValue2, error) {
	var body VertexAttrubutesValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVertexAttrubutesValue2 overwrites any union data inside the VertexAttrubutes_Value as the provided VertexAttrubutesValue2
func (t *VertexAttrubutes_Value) FromVertexAttrubutesValue2(v VertexAttrubutesValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVertexAttrubutesValue2 performs a merge with any union data inside the VertexAttrubutes_Value, using the provided VertexAttrubutesValue2
func (t *VertexAttrubutes_Value) MergeVertexAttrubutesValue2(v VertexAttrubutesValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VertexAttrubutes_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VertexAttrubutes_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(w http.ResponseWriter, r *http.Request)
	// Limpar status de saúde
	// (POST /vertices/clear-health-status)
	ClearHealthStatus(w http.ResponseWriter, r *http.Request)
	// Detalhes de um recurso
	// (GET /vertices/{key})
	GetVertex(w http.ResponseWriter, r *http.Request, key Key)
	// Atributos de um recurso
	// (GET /vertices/{key}/attributes)
	GetVertexAttributes(w http.ResponseWriter, r *http.Request, key Key)
	// Dependencias de um recurso
	// (GET /vertices/{key}/dependencies)
	GetVertexDependencies(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependenciesParams)
	// Recursos dependentes
	// (GET /vertices/{key}/dependents)
	GetVertexDependents(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependentsParams)
	// Marcar recurso como não saudável
	// (DELETE /vertices/{key}/healthy)
	MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request, key Key)
	// Marcar recurso como saudável
	// (POST /vertices/{key}/healthy)
	MarkVertexHealthy(w http.ResponseWriter, r *http.Request, key Key)
	// Vizinhos
	// (GET /vertices/{key}/neighbors)
	GetVertexNeighbors(w http.ResponseWriter, r *http.Request, key Key)
	// Caminho entre dois recursos
	// (GET /vertices/{key}/path/{target})
	GetPath(w http.ResponseWriter, r *http.Request, key Key, target string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Summary operation middleware
func (siw *ServerInterfaceWrapper) Summary(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Summary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClearHealthStatus operation middleware
func (siw *ServerInterfaceWrapper) ClearHealthStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClearHealthStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertex operation middleware
func (siw *ServerInterfaceWrapper) GetVertex(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertex(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetVertexAttributes(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexAttributes(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependencies operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependencies(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependenciesParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependencies(w, r, key, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependents operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependentsParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependents(w, r, key, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkVertexUnhealthy operation middleware
func (siw *ServerInterfaceWrapper) MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkVertexUnhealthy(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkVertexHealthy operation middleware
func (siw *ServerInterfaceWrapper) MarkVertexHealthy(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkVertexHealthy(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexNeighbors operation middleware
func (siw *ServerInterfaceWrapper) GetVertexNeighbors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexNeighbors(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPath operation middleware
func (siw *ServerInterfaceWrapper) GetPath(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Path parameter "target" -------------
	var target string

	err = runtime.BindStyledParameterWithOptions("simple", "target", r.PathValue("target"), &target, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "target", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPath(w, r, key, target)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/summary", wrapper.Summary)
	m.HandleFunc("POST "+options.BaseURL+"/vertices/clear-health-status", wrapper.ClearHealthStatus)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}", wrapper.GetVertex)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/attributes", wrapper.GetVertexAttributes)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/dependencies", wrapper.GetVertexDependencies)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/dependents", wrapper.GetVertexDependents)
	m.HandleFunc("DELETE "+options.BaseURL+"/vertices/{key}/healthy", wrapper.MarkVertexUnhealthy)
	m.HandleFunc("POST "+options.BaseURL+"/vertices/{key}/healthy", wrapper.MarkVertexHealthy)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/neighbors", wrapper.GetVertexNeighbors)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/path/{target}", wrapper.GetPath)

	return m
}

type InternalServerErrorJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type InvalidRequestJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type NotFoundJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type UnauthorizedJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type SummaryRequestObject struct {
}

type SummaryResponseObject interface {
	VisitSummaryResponse(w http.ResponseWriter) error
}

type Summary200JSONResponse Summary

func (response Summary200JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Summary401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Summary401JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Summary500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Summary500JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClearHealthStatusRequestObject struct {
}

type ClearHealthStatusResponseObject interface {
	VisitClearHealthStatusResponse(w http.ResponseWriter) error
}

type ClearHealthStatus200Response struct {
}

func (response ClearHealthStatus200Response) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ClearHealthStatus401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ClearHealthStatus401JSONResponse) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ClearHealthStatus500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ClearHealthStatus500JSONResponse) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexResponseObject interface {
	VisitGetVertexResponse(w http.ResponseWriter) error
}

type GetVertex200JSONResponse Vertex

func (response GetVertex200JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertex401JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertex404JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertex422JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertex500JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexAttributesRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexAttributesResponseObject interface {
	VisitGetVertexAttributesResponse(w http.ResponseWriter) error
}

type GetVertexAttributes200JSONResponse VertexAttrubutes

func (response GetVertexAttributes200JSONResponse) VisitGetVertexAttributesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexAttributes401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexAttributes401JSONResponse) VisitGetVertexAttributesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexAttributes404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexAttributes404JSONResponse) VisitGetVertexAttributesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexAttributes422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexAttributes422JSONResponse) VisitGetVertexAttributesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexAttributes500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexAttributes500JSONResponse) VisitGetVertexAttributesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependenciesRequestObject struct {
	Key    Key `json:"key"`
	Params GetVertexDependenciesParams
}

type GetVertexDependenciesResponseObject interface {
	VisitGetVertexDependenciesResponse(w http.ResponseWriter) error
}

type GetVertexDependencies200JSONResponse Subgraph

func (response GetVertexDependencies200JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependencies401JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependencies404JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependencies422JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependencies500JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependentsRequestObject struct {
	Key    Key `json:"key"`
	Params GetVertexDependentsParams
}

type GetVertexDependentsResponseObject interface {
	VisitGetVertexDependentsResponse(w http.ResponseWriter) error
}

type GetVertexDependents200JSONResponse Subgraph

func (response GetVertexDependents200JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependents401JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependents404JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependents422JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependents500JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthyRequestObject struct {
	Key Key `json:"key"`
}

type MarkVertexUnhealthyResponseObject interface {
	VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error
}

type MarkVertexUnhealthy200Response struct {
}

func (response MarkVertexUnhealthy200Response) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MarkVertexUnhealthy401JSONResponse struct{ UnauthorizedJSONResponse }

func (response MarkVertexUnhealthy401JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy404JSONResponse struct{ NotFoundJSONResponse }

func (response MarkVertexUnhealthy404JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy422JSONResponse struct{ InvalidRequestJSONResponse }

func (response MarkVertexUnhealthy422JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response MarkVertexUnhealthy500JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthyRequestObject struct {
	Key Key `json:"key"`
}

type MarkVertexHealthyResponseObject interface {
	VisitMarkVertexHealthyResponse(w http.ResponseWriter) error
}

type MarkVertexHealthy200Response struct {
}

func (response MarkVertexHealthy200Response) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MarkVertexHealthy401JSONResponse struct{ UnauthorizedJSONResponse }

func (response MarkVertexHealthy401JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthy404JSONResponse struct{ NotFoundJSONResponse }

func (response MarkVertexHealthy404JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthy422JSONResponse struct{ InvalidRequestJSONResponse }

func (response MarkVertexHealthy422JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthy500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response MarkVertexHealthy500JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighborsRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexNeighborsResponseObject interface {
	VisitGetVertexNeighborsResponse(w http.ResponseWriter) error
}

type GetVertexNeighbors200JSONResponse Subgraph

func (response GetVertexNeighbors200JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexNeighbors401JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexNeighbors404JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexNeighbors422JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexNeighbors500JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPathRequestObject struct {
	Key    Key    `json:"key"`
	Target string `json:"target"`
}

type GetPathResponseObject interface {
	VisitGetPathResponse(w http.ResponseWriter) error
}

type GetPath200JSONResponse Subgraph

func (response GetPath200JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPath401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetPath401JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPath404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPath404JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPath422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetPath422JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetPath500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPath500JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(ctx context.Context, request SummaryRequestObject) (SummaryResponseObject, error)
	// Limpar status de saúde
	// (POST /vertices/clear-health-status)
	ClearHealthStatus(ctx context.Context, request ClearHealthStatusRequestObject) (ClearHealthStatusResponseObject, error)
	// Detalhes de um recurso
	// (GET /vertices/{key})
	GetVertex(ctx context.Context, request GetVertexRequestObject) (GetVertexResponseObject, error)
	// Atributos de um recurso
	// (GET /vertices/{key}/attributes)
	GetVertexAttributes(ctx context.Context, request GetVertexAttributesRequestObject) (GetVertexAttributesResponseObject, error)
	// Dependencias de um recurso
	// (GET /vertices/{key}/dependencies)
	GetVertexDependencies(ctx context.Context, request GetVertexDependenciesRequestObject) (GetVertexDependenciesResponseObject, error)
	// Recursos dependentes
	// (GET /vertices/{key}/dependents)
	GetVertexDependents(ctx context.Context, request GetVertexDependentsRequestObject) (GetVertexDependentsResponseObject, error)
	// Marcar recurso como não saudável
	// (DELETE /vertices/{key}/healthy)
	MarkVertexUnhealthy(ctx context.Context, request MarkVertexUnhealthyRequestObject) (MarkVertexUnhealthyResponseObject, error)
	// Marcar recurso como saudável
	// (POST /vertices/{key}/healthy)
	MarkVertexHealthy(ctx context.Context, request MarkVertexHealthyRequestObject) (MarkVertexHealthyResponseObject, error)
	// Vizinhos
	// (GET /vertices/{key}/neighbors)
	GetVertexNeighbors(ctx context.Context, request GetVertexNeighborsRequestObject) (GetVertexNeighborsResponseObject, error)
	// Caminho entre dois recursos
	// (GET /vertices/{key}/path/{target})
	GetPath(ctx context.Context, request GetPathRequestObject) (GetPathResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Summary operation middleware
func (sh *strictHandler) Summary(w http.ResponseWriter, r *http.Request) {
	var request SummaryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Summary(ctx, request.(SummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Summary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SummaryResponseObject); ok {
		if err := validResponse.VisitSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClearHealthStatus operation middleware
func (sh *strictHandler) ClearHealthStatus(w http.ResponseWriter, r *http.Request) {
	var request ClearHealthStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClearHealthStatus(ctx, request.(ClearHealthStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClearHealthStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClearHealthStatusResponseObject); ok {
		if err := validResponse.VisitClearHealthStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertex operation middleware
func (sh *strictHandler) GetVertex(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertex(ctx, request.(GetVertexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexResponseObject); ok {
		if err := validResponse.VisitGetVertexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexAttributes operation middleware
func (sh *strictHandler) GetVertexAttributes(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexAttributesRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexAttributes(ctx, request.(GetVertexAttributesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexAttributes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexAttributesResponseObject); ok {
		if err := validResponse.VisitGetVertexAttributesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependencies operation middleware
func (sh *strictHandler) GetVertexDependencies(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependenciesParams) {
	var request GetVertexDependenciesRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependencies(ctx, request.(GetVertexDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependenciesResponseObject); ok {
		if err := validResponse.VisitGetVertexDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependents operation middleware
func (sh *strictHandler) GetVertexDependents(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependentsParams) {
	var request GetVertexDependentsRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependents(ctx, request.(GetVertexDependentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependentsResponseObject); ok {
		if err := validResponse.VisitGetVertexDependentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MarkVertexUnhealthy operation middleware
func (sh *strictHandler) MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request, key Key) {
	var request MarkVertexUnhealthyRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MarkVertexUnhealthy(ctx, request.(MarkVertexUnhealthyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkVertexUnhealthy")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MarkVertexUnhealthyResponseObject); ok {
		if err := validResponse.VisitMarkVertexUnhealthyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MarkVertexHealthy operation middleware
func (sh *strictHandler) MarkVertexHealthy(w http.ResponseWriter, r *http.Request, key Key) {
	var request MarkVertexHealthyRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MarkVertexHealthy(ctx, request.(MarkVertexHealthyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkVertexHealthy")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MarkVertexHealthyResponseObject); ok {
		if err := validResponse.VisitMarkVertexHealthyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexNeighbors operation middleware
func (sh *strictHandler) GetVertexNeighbors(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexNeighborsRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexNeighbors(ctx, request.(GetVertexNeighborsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexNeighbors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexNeighborsResponseObject); ok {
		if err := validResponse.VisitGetVertexNeighborsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPath operation middleware
func (sh *strictHandler) GetPath(w http.ResponseWriter, r *http.Request, key Key, target string) {
	var request GetPathRequestObject

	request.Key = key
	request.Target = target

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPath(ctx, request.(GetPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPathResponseObject); ok {
		if err := validResponse.VisitGetPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"k8v/DwAA//9kcf3ti0IAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
