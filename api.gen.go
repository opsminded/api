//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerHttpAuthenticationScopes = "bearerHttpAuthentication.Scopes"
)

// Defines values for VertexStatus.
const (
	Error VertexStatus = "error"
	Ok    VertexStatus = "ok"
)

// Edge Um relacionamento entre recursos
type Edge struct {
	// Class Classe ou Categoria do relacionamento
	Class string `json:"class"`

	// Destination Label único do recurso de destino
	Destination string `json:"destination"`

	// Label Nome do relacionamento que será exibido
	Label string `json:"label"`

	// Source Label único do recurso de origem
	Source string `json:"source"`
}

// Subgraph Recursos e seus relacionamentos apresentados de forma útil para consumo e visualização.
type Subgraph struct {
	// All Se verdadeiro, retorna todos os itens do grafo, mesmo que não estejam conectados diretamente.
	All bool `json:"all"`

	// Edges Lista de relacionamentos que devem ser exibidos no grafo
	Edges []Edge `json:"edges"`

	// Highlights Elementos que devem ser destacados no grafo
	Highlights []Vertex `json:"highlights"`

	// Principal Um ativo de TI
	Principal Vertex `json:"principal"`

	// Title Nome que será exibido para a sessão do grafo
	Title string `json:"title"`

	// Vertices Lista de recursos que devem ser exibidos no grafo
	Vertices []Vertex `json:"vertices"`
}

// Summary Um sumário sobre o estado da infraestrutura
type Summary struct {
	// TotalVertices O número total de recursos presentes na base
	TotalVertices int `json:"total_vertices"`

	// UnhealthyVertices Lista de recursos não saudáveis
	UnhealthyVertices []Vertex `json:"unhealthy_vertices"`
}

// Vertex Um ativo de TI
type Vertex struct {
	// Class Classe ou Categoria do recurso
	Class string `json:"class"`

	// Label Nome que será exibido
	Label string `json:"label"`

	// LastCheck O timestamp da última verificação
	LastCheck string `json:"last_check"`

	// Status Saúde do recurso. Um recurso pode não estar saudável por causa de um de suas dependências.
	Status VertexStatus `json:"status"`
}

// VertexStatus Saúde do recurso. Um recurso pode não estar saudável por causa de um de suas dependências.
type VertexStatus string

// Label defines model for label.
type Label = string

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// GetVertexDependenciesParams defines parameters for GetVertexDependencies.
type GetVertexDependenciesParams struct {
	// All Se verdadeiro, retorna todas as dependências do recurso, mesmo que não estejam conectadas diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// GetVertexDependentsParams defines parameters for GetVertexDependents.
type GetVertexDependentsParams struct {
	// All Se verdadeiro, retorna todos os dependentes do recurso, mesmo que não estejam conectados diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(w http.ResponseWriter, r *http.Request)
	// Detalhes de um recurso
	// (GET /vertices/{label})
	GetVertex(w http.ResponseWriter, r *http.Request, label Label)
	// Dependencias de um recurso
	// (GET /vertices/{label}/dependencies)
	GetVertexDependencies(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependenciesParams)
	// Recursos dependentes
	// (GET /vertices/{label}/dependents)
	GetVertexDependents(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependentsParams)
	// Trilhas
	// (GET /vertices/{label}/lineages)
	GetVertexLineages(w http.ResponseWriter, r *http.Request, label Label)
	// Vizinhos
	// (GET /vertices/{label}/neighbors)
	GetVertexNeighbors(w http.ResponseWriter, r *http.Request, label Label)
	// Caminho entre dois recursos
	// (GET /vertices/{label}/path/{destination})
	GetPath(w http.ResponseWriter, r *http.Request, label Label, destination string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Summary operation middleware
func (siw *ServerInterfaceWrapper) Summary(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Summary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertex operation middleware
func (siw *ServerInterfaceWrapper) GetVertex(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertex(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependencies operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependencies(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependenciesParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependencies(w, r, label, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependents operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependentsParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependents(w, r, label, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexLineages operation middleware
func (siw *ServerInterfaceWrapper) GetVertexLineages(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexLineages(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexNeighbors operation middleware
func (siw *ServerInterfaceWrapper) GetVertexNeighbors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexNeighbors(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPath operation middleware
func (siw *ServerInterfaceWrapper) GetPath(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	// ------------- Path parameter "destination" -------------
	var destination string

	err = runtime.BindStyledParameterWithOptions("simple", "destination", r.PathValue("destination"), &destination, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destination", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPath(w, r, label, destination)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/summary", wrapper.Summary)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}", wrapper.GetVertex)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/dependencies", wrapper.GetVertexDependencies)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/dependents", wrapper.GetVertexDependents)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/lineages", wrapper.GetVertexLineages)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/neighbors", wrapper.GetVertexNeighbors)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/path/{destination}", wrapper.GetPath)

	return m
}

type InternalServerErrorJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type InvalidRequestJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type NotFoundJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type UnauthorizedJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type SummaryRequestObject struct {
}

type SummaryResponseObject interface {
	VisitSummaryResponse(w http.ResponseWriter) error
}

type Summary200JSONResponse Summary

func (response Summary200JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Summary401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Summary401JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Summary500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Summary500JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexResponseObject interface {
	VisitGetVertexResponse(w http.ResponseWriter) error
}

type GetVertex200JSONResponse Vertex

func (response GetVertex200JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertex401JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertex404JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertex422JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertex500JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependenciesRequestObject struct {
	Label  Label `json:"label"`
	Params GetVertexDependenciesParams
}

type GetVertexDependenciesResponseObject interface {
	VisitGetVertexDependenciesResponse(w http.ResponseWriter) error
}

type GetVertexDependencies200JSONResponse Subgraph

func (response GetVertexDependencies200JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependencies401JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependencies404JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependencies422JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependencies500JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependentsRequestObject struct {
	Label  Label `json:"label"`
	Params GetVertexDependentsParams
}

type GetVertexDependentsResponseObject interface {
	VisitGetVertexDependentsResponse(w http.ResponseWriter) error
}

type GetVertexDependents200JSONResponse Subgraph

func (response GetVertexDependents200JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependents401JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependents404JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependents422JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependents500JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineagesRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexLineagesResponseObject interface {
	VisitGetVertexLineagesResponse(w http.ResponseWriter) error
}

type GetVertexLineages200JSONResponse Subgraph

func (response GetVertexLineages200JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexLineages401JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexLineages404JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexLineages422JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexLineages500JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighborsRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexNeighborsResponseObject interface {
	VisitGetVertexNeighborsResponse(w http.ResponseWriter) error
}

type GetVertexNeighbors200JSONResponse Subgraph

func (response GetVertexNeighbors200JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexNeighbors401JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexNeighbors404JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexNeighbors422JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexNeighbors500JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPathRequestObject struct {
	Label       Label  `json:"label"`
	Destination string `json:"destination"`
}

type GetPathResponseObject interface {
	VisitGetPathResponse(w http.ResponseWriter) error
}

type GetPath200JSONResponse Subgraph

func (response GetPath200JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPath401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetPath401JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPath404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPath404JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPath422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetPath422JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetPath500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPath500JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(ctx context.Context, request SummaryRequestObject) (SummaryResponseObject, error)
	// Detalhes de um recurso
	// (GET /vertices/{label})
	GetVertex(ctx context.Context, request GetVertexRequestObject) (GetVertexResponseObject, error)
	// Dependencias de um recurso
	// (GET /vertices/{label}/dependencies)
	GetVertexDependencies(ctx context.Context, request GetVertexDependenciesRequestObject) (GetVertexDependenciesResponseObject, error)
	// Recursos dependentes
	// (GET /vertices/{label}/dependents)
	GetVertexDependents(ctx context.Context, request GetVertexDependentsRequestObject) (GetVertexDependentsResponseObject, error)
	// Trilhas
	// (GET /vertices/{label}/lineages)
	GetVertexLineages(ctx context.Context, request GetVertexLineagesRequestObject) (GetVertexLineagesResponseObject, error)
	// Vizinhos
	// (GET /vertices/{label}/neighbors)
	GetVertexNeighbors(ctx context.Context, request GetVertexNeighborsRequestObject) (GetVertexNeighborsResponseObject, error)
	// Caminho entre dois recursos
	// (GET /vertices/{label}/path/{destination})
	GetPath(ctx context.Context, request GetPathRequestObject) (GetPathResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Summary operation middleware
func (sh *strictHandler) Summary(w http.ResponseWriter, r *http.Request) {
	var request SummaryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Summary(ctx, request.(SummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Summary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SummaryResponseObject); ok {
		if err := validResponse.VisitSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertex operation middleware
func (sh *strictHandler) GetVertex(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertex(ctx, request.(GetVertexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexResponseObject); ok {
		if err := validResponse.VisitGetVertexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependencies operation middleware
func (sh *strictHandler) GetVertexDependencies(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependenciesParams) {
	var request GetVertexDependenciesRequestObject

	request.Label = label
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependencies(ctx, request.(GetVertexDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependenciesResponseObject); ok {
		if err := validResponse.VisitGetVertexDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependents operation middleware
func (sh *strictHandler) GetVertexDependents(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependentsParams) {
	var request GetVertexDependentsRequestObject

	request.Label = label
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependents(ctx, request.(GetVertexDependentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependentsResponseObject); ok {
		if err := validResponse.VisitGetVertexDependentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexLineages operation middleware
func (sh *strictHandler) GetVertexLineages(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexLineagesRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexLineages(ctx, request.(GetVertexLineagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexLineages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexLineagesResponseObject); ok {
		if err := validResponse.VisitGetVertexLineagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexNeighbors operation middleware
func (sh *strictHandler) GetVertexNeighbors(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexNeighborsRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexNeighbors(ctx, request.(GetVertexNeighborsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexNeighbors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexNeighborsResponseObject); ok {
		if err := validResponse.VisitGetVertexNeighborsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPath operation middleware
func (sh *strictHandler) GetPath(w http.ResponseWriter, r *http.Request, label Label, destination string) {
	var request GetPathRequestObject

	request.Label = label
	request.Destination = destination

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPath(ctx, request.(GetPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPathResponseObject); ok {
		if err := validResponse.VisitGetPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
