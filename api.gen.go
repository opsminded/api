//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerHttpAuthenticationScopes = "bearerHttpAuthentication.Scopes"
)

// Edge Um relacionamento entre recursos
type Edge struct {
	// Class Classe ou Categoria do relacionamento
	Class string `json:"class"`

	// Key Identificador único do relacionamento
	Key string `json:"key"`

	// Label Nome do relacionamento que será exibido
	Label string `json:"label"`

	// Source Label único do recurso de origem
	Source string `json:"source"`

	// Target Label único do recurso de destino
	Target string `json:"target"`
}

// Subgraph Recursos e seus relacionamentos apresentados de forma útil para consumo e visualização.
type Subgraph struct {
	// All Se verdadeiro, retorna todos os itens do grafo, mesmo que não estejam conectados diretamente.
	All bool `json:"all"`

	// Edges Lista de relacionamentos que devem ser exibidos no grafo
	Edges []Edge `json:"edges"`

	// Highlights Elementos que devem ser destacados no grafo
	Highlights []Vertex `json:"highlights"`

	// Principal Um ativo de TI
	Principal Vertex `json:"principal"`

	// Title Nome que será exibido para a sessão do grafo
	Title string `json:"title"`

	// Vertices Lista de recursos que devem ser exibidos no grafo
	Vertices []Vertex `json:"vertices"`
}

// Summary Um sumário sobre o estado da infraestrutura
type Summary struct {
	// TotalEdges O número total de relacionamentos presentes na base
	TotalEdges int `json:"total_edges"`

	// TotalVertices O número total de recursos presentes na base
	TotalVertices int `json:"total_vertices"`

	// UnhealthyVertices Lista de recursos não saudáveis
	UnhealthyVertices []Vertex `json:"unhealthy_vertices"`
}

// Vertex Um ativo de TI
type Vertex struct {
	// Healthy Saúde do recurso. Um recurso pode não estar saudável por causa de um de suas dependências.
	Healthy bool `json:"healthy"`

	// Key identificador único do recurso
	Key string `json:"key"`

	// Label Nome que será exibido
	Label string `json:"label"`

	// LastCheck O timestamp da última verificação
	LastCheck string `json:"last_check"`
}

// Key defines model for key.
type Key = string

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// GetVertexDependenciesParams defines parameters for GetVertexDependencies.
type GetVertexDependenciesParams struct {
	// All Se verdadeiro, retorna todas as dependências do recurso, mesmo que não estejam conectadas diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// GetVertexDependentsParams defines parameters for GetVertexDependents.
type GetVertexDependentsParams struct {
	// All Se verdadeiro, retorna todos os dependentes do recurso, mesmo que não estejam conectados diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(w http.ResponseWriter, r *http.Request)
	// Limpar status de saúde
	// (POST /vertices/clear-health-status)
	ClearHealthStatus(w http.ResponseWriter, r *http.Request)
	// Detalhes de um recurso
	// (GET /vertices/{key})
	GetVertex(w http.ResponseWriter, r *http.Request, key Key)
	// Dependencias de um recurso
	// (GET /vertices/{key}/dependencies)
	GetVertexDependencies(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependenciesParams)
	// Recursos dependentes
	// (GET /vertices/{key}/dependents)
	GetVertexDependents(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependentsParams)
	// Trilhas
	// (GET /vertices/{key}/lineages)
	GetVertexLineages(w http.ResponseWriter, r *http.Request, key Key)
	// Vizinhos
	// (GET /vertices/{key}/neighbors)
	GetVertexNeighbors(w http.ResponseWriter, r *http.Request, key Key)
	// Caminho entre dois recursos
	// (GET /vertices/{key}/path/{target})
	GetPath(w http.ResponseWriter, r *http.Request, key Key, target string)
	// Marcar recurso como não saudável
	// (POST /vertices/{key}/unhealthy)
	MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request, key Key)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Summary operation middleware
func (siw *ServerInterfaceWrapper) Summary(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Summary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClearHealthStatus operation middleware
func (siw *ServerInterfaceWrapper) ClearHealthStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClearHealthStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertex operation middleware
func (siw *ServerInterfaceWrapper) GetVertex(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertex(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependencies operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependencies(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependenciesParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependencies(w, r, key, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependents operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependentsParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependents(w, r, key, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexLineages operation middleware
func (siw *ServerInterfaceWrapper) GetVertexLineages(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexLineages(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexNeighbors operation middleware
func (siw *ServerInterfaceWrapper) GetVertexNeighbors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexNeighbors(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPath operation middleware
func (siw *ServerInterfaceWrapper) GetPath(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Path parameter "target" -------------
	var target string

	err = runtime.BindStyledParameterWithOptions("simple", "target", r.PathValue("target"), &target, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "target", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPath(w, r, key, target)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkVertexUnhealthy operation middleware
func (siw *ServerInterfaceWrapper) MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkVertexUnhealthy(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/summary", wrapper.Summary)
	m.HandleFunc("POST "+options.BaseURL+"/vertices/clear-health-status", wrapper.ClearHealthStatus)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}", wrapper.GetVertex)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/dependencies", wrapper.GetVertexDependencies)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/dependents", wrapper.GetVertexDependents)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/lineages", wrapper.GetVertexLineages)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/neighbors", wrapper.GetVertexNeighbors)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/path/{target}", wrapper.GetPath)
	m.HandleFunc("POST "+options.BaseURL+"/vertices/{key}/unhealthy", wrapper.MarkVertexUnhealthy)

	return m
}

type InternalServerErrorJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type InvalidRequestJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type NotFoundJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type UnauthorizedJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type SummaryRequestObject struct {
}

type SummaryResponseObject interface {
	VisitSummaryResponse(w http.ResponseWriter) error
}

type Summary200JSONResponse Summary

func (response Summary200JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Summary401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Summary401JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Summary500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Summary500JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClearHealthStatusRequestObject struct {
}

type ClearHealthStatusResponseObject interface {
	VisitClearHealthStatusResponse(w http.ResponseWriter) error
}

type ClearHealthStatus200Response struct {
}

func (response ClearHealthStatus200Response) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ClearHealthStatus401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ClearHealthStatus401JSONResponse) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ClearHealthStatus500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ClearHealthStatus500JSONResponse) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexResponseObject interface {
	VisitGetVertexResponse(w http.ResponseWriter) error
}

type GetVertex200JSONResponse Vertex

func (response GetVertex200JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertex401JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertex404JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertex422JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertex500JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependenciesRequestObject struct {
	Key    Key `json:"key"`
	Params GetVertexDependenciesParams
}

type GetVertexDependenciesResponseObject interface {
	VisitGetVertexDependenciesResponse(w http.ResponseWriter) error
}

type GetVertexDependencies200JSONResponse Subgraph

func (response GetVertexDependencies200JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependencies401JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependencies404JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependencies422JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependencies500JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependentsRequestObject struct {
	Key    Key `json:"key"`
	Params GetVertexDependentsParams
}

type GetVertexDependentsResponseObject interface {
	VisitGetVertexDependentsResponse(w http.ResponseWriter) error
}

type GetVertexDependents200JSONResponse Subgraph

func (response GetVertexDependents200JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependents401JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependents404JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependents422JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependents500JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineagesRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexLineagesResponseObject interface {
	VisitGetVertexLineagesResponse(w http.ResponseWriter) error
}

type GetVertexLineages200JSONResponse Subgraph

func (response GetVertexLineages200JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexLineages401JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexLineages404JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexLineages422JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexLineages500JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighborsRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexNeighborsResponseObject interface {
	VisitGetVertexNeighborsResponse(w http.ResponseWriter) error
}

type GetVertexNeighbors200JSONResponse Subgraph

func (response GetVertexNeighbors200JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexNeighbors401JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexNeighbors404JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexNeighbors422JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexNeighbors500JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPathRequestObject struct {
	Key    Key    `json:"key"`
	Target string `json:"target"`
}

type GetPathResponseObject interface {
	VisitGetPathResponse(w http.ResponseWriter) error
}

type GetPath200JSONResponse Subgraph

func (response GetPath200JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPath401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetPath401JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPath404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPath404JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPath422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetPath422JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetPath500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPath500JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthyRequestObject struct {
	Key Key `json:"key"`
}

type MarkVertexUnhealthyResponseObject interface {
	VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error
}

type MarkVertexUnhealthy200Response struct {
}

func (response MarkVertexUnhealthy200Response) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MarkVertexUnhealthy401JSONResponse struct{ UnauthorizedJSONResponse }

func (response MarkVertexUnhealthy401JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy404JSONResponse struct{ NotFoundJSONResponse }

func (response MarkVertexUnhealthy404JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy422JSONResponse struct{ InvalidRequestJSONResponse }

func (response MarkVertexUnhealthy422JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response MarkVertexUnhealthy500JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(ctx context.Context, request SummaryRequestObject) (SummaryResponseObject, error)
	// Limpar status de saúde
	// (POST /vertices/clear-health-status)
	ClearHealthStatus(ctx context.Context, request ClearHealthStatusRequestObject) (ClearHealthStatusResponseObject, error)
	// Detalhes de um recurso
	// (GET /vertices/{key})
	GetVertex(ctx context.Context, request GetVertexRequestObject) (GetVertexResponseObject, error)
	// Dependencias de um recurso
	// (GET /vertices/{key}/dependencies)
	GetVertexDependencies(ctx context.Context, request GetVertexDependenciesRequestObject) (GetVertexDependenciesResponseObject, error)
	// Recursos dependentes
	// (GET /vertices/{key}/dependents)
	GetVertexDependents(ctx context.Context, request GetVertexDependentsRequestObject) (GetVertexDependentsResponseObject, error)
	// Trilhas
	// (GET /vertices/{key}/lineages)
	GetVertexLineages(ctx context.Context, request GetVertexLineagesRequestObject) (GetVertexLineagesResponseObject, error)
	// Vizinhos
	// (GET /vertices/{key}/neighbors)
	GetVertexNeighbors(ctx context.Context, request GetVertexNeighborsRequestObject) (GetVertexNeighborsResponseObject, error)
	// Caminho entre dois recursos
	// (GET /vertices/{key}/path/{target})
	GetPath(ctx context.Context, request GetPathRequestObject) (GetPathResponseObject, error)
	// Marcar recurso como não saudável
	// (POST /vertices/{key}/unhealthy)
	MarkVertexUnhealthy(ctx context.Context, request MarkVertexUnhealthyRequestObject) (MarkVertexUnhealthyResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Summary operation middleware
func (sh *strictHandler) Summary(w http.ResponseWriter, r *http.Request) {
	var request SummaryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Summary(ctx, request.(SummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Summary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SummaryResponseObject); ok {
		if err := validResponse.VisitSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClearHealthStatus operation middleware
func (sh *strictHandler) ClearHealthStatus(w http.ResponseWriter, r *http.Request) {
	var request ClearHealthStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClearHealthStatus(ctx, request.(ClearHealthStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClearHealthStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClearHealthStatusResponseObject); ok {
		if err := validResponse.VisitClearHealthStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertex operation middleware
func (sh *strictHandler) GetVertex(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertex(ctx, request.(GetVertexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexResponseObject); ok {
		if err := validResponse.VisitGetVertexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependencies operation middleware
func (sh *strictHandler) GetVertexDependencies(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependenciesParams) {
	var request GetVertexDependenciesRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependencies(ctx, request.(GetVertexDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependenciesResponseObject); ok {
		if err := validResponse.VisitGetVertexDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependents operation middleware
func (sh *strictHandler) GetVertexDependents(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependentsParams) {
	var request GetVertexDependentsRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependents(ctx, request.(GetVertexDependentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependentsResponseObject); ok {
		if err := validResponse.VisitGetVertexDependentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexLineages operation middleware
func (sh *strictHandler) GetVertexLineages(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexLineagesRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexLineages(ctx, request.(GetVertexLineagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexLineages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexLineagesResponseObject); ok {
		if err := validResponse.VisitGetVertexLineagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexNeighbors operation middleware
func (sh *strictHandler) GetVertexNeighbors(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexNeighborsRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexNeighbors(ctx, request.(GetVertexNeighborsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexNeighbors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexNeighborsResponseObject); ok {
		if err := validResponse.VisitGetVertexNeighborsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPath operation middleware
func (sh *strictHandler) GetPath(w http.ResponseWriter, r *http.Request, key Key, target string) {
	var request GetPathRequestObject

	request.Key = key
	request.Target = target

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPath(ctx, request.(GetPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPathResponseObject); ok {
		if err := validResponse.VisitGetPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MarkVertexUnhealthy operation middleware
func (sh *strictHandler) MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request, key Key) {
	var request MarkVertexUnhealthyRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MarkVertexUnhealthy(ctx, request.(MarkVertexUnhealthyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkVertexUnhealthy")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MarkVertexUnhealthyResponseObject); ok {
		if err := validResponse.VisitMarkVertexUnhealthyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RbzW4cR5J+lUR5D3aj2E1RHmDAPcxSpCxzxvpZUfYcTMGOroruTqkys5SZ1SZNENiH",
	"2BcQ9mBoAJ2Mvehab7JPsojIrJ+uLv5II2NmrJPE7qrM+P3ii8jsiyQzqjQatXfJ/kVSggWFHi3/9RLP",
	"6Z8cXWZl6aXRyX5ynKP2ciEzyI0V9TstMyNyIyxmlXUmSRM8A1UWmOwnR/f2Tv5y9Oe7SZpIercEv0rS",
	"RIOib2n5NLH4qpIW82Tf2wrTxGUrVED7+vOSHnPeSr1MLi8v6WFXGu2QxTvWHq2G4gTtGu19a42ljzOj",
	"PWpP/4WyLGQGJPnshSPxLzrp6Mkck/0/7O6mCYa32zVFWFSEVS/7YpXWlGi9DEKENYZGOqx/zeWS7UIr",
	"J2mjjNQel8grYiPw5qsPUTtYohI5Dt5tDdE32vdBgma55+3TZv4CMx/MtrkD6SQkK8oSOrRrmQc1j/Ua",
	"Cpk/xVcVOv8h5vxyb68z5z3IRbPW78uIpJV0sv6l/h8y5rp+XcgcSKRHxn9lKp1/kPF2v+yM98h4EVb6",
	"vZmOkUJoMh1qspGF3JBM32qo/MpY+TN+oP3udPbbWOx3mMI5Cqg86QcchrxsUJL1up8vR/T6VgmLBWTS",
	"EAxrTy7wFhv8dkk6NE8Bzo3Yhz5GYSpxCB6XxkoIZaC/dlcNHOm5kBZ/gqL4ITNaJ2mSg4c5OGz+XoLH",
	"n+A8/Pl8y2rp+1aka0Q5urf36OT424PHO6fV7u5dfHiyc3Lwl53Hfz3+zyRNen/F79vnR+UqYI7FtmSP",
	"jMJtScSrCgl069cCz+Rc5kPZDo3GM0qOzCjxVbRZkm5+fg90xjFwBLlxo1I5U9lsJAS+IWm3SzctZqxc",
	"orrKVpuWGd3Tg12if689c3ReavPBmw6SKdCK4JE0Rm9ri1ZAWkZ6ZilPh3EySL80OanmSwvlalutiGVO",
	"kEcrN/C0E1BadKg9+Yh0XRirQNTvvCwEkS2RGe0qZQSKtXQVFE0yT7fykGJga/8TFGu0OeQorUmFRW+s",
	"BuEN7WeckB61I3svLSxMKhQ6FQIwoK/z+AIUSYFZFFJa9Cw+kgyNkQ6KghZTrrPP3JgCQTMQ5kscwYhv",
	"pPNAag/NQgLkuEZFedBkgRM6ykl8kffav0j+zeIi2U8+m3VMdRZBbsYId3mVJ3uigrVwTk+u5HJVyOXK",
	"j0h7v8BR8Sg+IYMPEfA7tB7P+iIe0WJEiEaEK63UmSyheO9lR4FnC2ZCxIFw6Bx5P++06WdeG9M5lqgJ",
	"XJFj97TLydMkSZMj/rr+m84kcIw9lJk1zCbrX4w47aftaTKKFmsK7+yG0InSfKSY2XbJ067ybXpkACzh",
	"+b6b0iQAcy+qejo1adGDmhNchhKQo3gQpR5BG6XAno+Wblep+rWVRjgztyg4gyE3Igch9cICOm8rX1nY",
	"gg9vPBQ/XJGoj4Wu3ym0RvBjYykbgQyd0CCoaPc7vTt7u3d3OzWfXbHIKIkKgl0dCaOyxZi4Qai7IyIx",
	"Io4KUukVQuFX5z+8T1gyjjqo8vr1GqX7u8Nwc8HixqDsuXXLlqM6bVQ+rj25CcHI5hlG0VZ4RsnHohO8",
	"XPMqz4634i/KMVLCoH6XY48TTAVz1GCN0uRdrQLbGUaUxooMKsfuqJhsuwoa1IqwNN3EtgUUDlNvK3w+",
	"VsZG6aW87cDjvbnSdazxJo4Y5xO7d5K0/f9e7/93r9jR+R+yFWYvx/LMS0VGViXBSf2u8FIB0QtWPrQY",
	"acIMxif7TN536JXk/RhZEwgb0jzfyoPt0CNGS99Jf35CWRTiao5g0X7tfXlQ+RW5KjSJ3XdfNRL/+a/P",
	"kmEndY8fEd68RC0qJ/VSgAgPcqpi+0wn0Mr7MnRleBbGRUcmGwGLB9KvqjlloS3ia25/Nlvyx9PMqJkp",
	"nZI6x3zmSszIQ1IvTNP5QsZEGhVIet+DzaSTZurAObDwH7lRUktDK03nthusPYsPiq/ESXg02e4gCccO",
	"nhyLhZEisxJyCPRgYazGDG1gpoUHJ2z9upQ5EMkldsiATn+GGsRJ70LWi8zWb73MCJppMQIAipz/DQyi",
	"tCavAr0V9wuIUFfNnZe+ksKZoooPI9lDMh2mnTKjjDh8eHTPpcJJ5wlCaUFVv/FWZuBSUZilo27UW8ik",
	"XqaCHgFfQXi5IpJL2RPqr5kTTwm1qaCuJ3B0AVyyGiEGWHKqT/Vnn4lDozOUVBPn9WtHyp7q1pwOuQ5J",
	"EKhEpUC0WMqtDrPIbAWK7B05OaV6iVZJj0KZHAuwG1Jwe05JQFvyquSbF5X2Jor0GSEmrybqN6yncZ6w",
	"0+7TAztiMvmufhPwfzIRn5tK6PpX98W+eIpNg6JoI0mdhEuDyZq5IH2g+tSO7Tyn/tO1Sk3DNgeWEMRN",
	"JptLb6vjxLqRKG6Xb9JJKrE5zxcgM2XR0JBFpdlpMrjjEXUwTUikYsiCyBzBpHkXB8FQXSRT8wVZ/TYr",
	"CNk/Pzp48EVrtqPuKdLpwPVV8fXf2BuOLWdSIXUuM9A5m17gGaqyCN3WKQMz8+KDhleTju2n906TxoSN",
	"KLTh4yitDm2/9vUbJTKZFcb9O9nG4QtISQZd/xoe4oIZd7Cxm6MnSba2s+NiKUM3OA0R9MRYlpT3c51B",
	"3J9O9SFvSLEXv90iCuL//uu/hdGhEne9fdTzZiH4fRJdiQLXYAWIycTVb6xklmfmBac840n0v0BR1L8u",
	"ScTJJMTQfnRaL5JEJm1WFWD3JxNxZCTHrqLXWwZH1U0JVfmqlavte1LBDTW5VFJWufotcY8cF1JLywlu",
	"LEmdFRBSXGoZgYuBLqX2sZDLOPqhcPb9Nr8JM1hSRhJ0cv5ao5BiiqSO1s+pDBMgq2DJtYS5pIWUAAG6",
	"fl1IxzaVqoTMmym7NAZhSsBkxFgQGnEvjc1V+8nh1icHKWUuBdiriol0wSjt69eBhJGFyBoLKFbwp6DV",
	"E2tKWEIzIyeTBfIcmhZHyt1XHaBz/BjhPPjKic85Xyctg518QTqUYc0IIxueqmJmhBRYogUrJpNyU4jg",
	"uRwmE/aFmtdvlxVPLoNQ0zaECnNOMVbKEgupkRvQue3JDWou2+b48Hh2eJQOQCzmELgY2mwpKwpjStcY",
	"xLiUPIa5JBMaAWvQ5KEcxbySRe6Ctz0u20oKlTcKfKiN01PNfnYOnVCGizEB4QML5Uo8DnWOAsWfc4Ga",
	"TAJMhIIzmQjg8h/sYyphW9gOH+UY8abttKctKjlcVigGNa5SZL+DB+JzBk+PuTjIzskOQaYvKFsZacAC",
	"pVsPUec8NA8eIuMvICPJu/gmKqAXMvRaIt+s0KKLfS7URzE6snNxkpmSuB1S9fZ45ncOfgKL4pifFwca",
	"inMnqZAP/DqAucAhziCNhbZSrIpitlySlboiSc+C9bJYsVYbgRFoEjS1rxmMu3RYVwXxiQJ0hsClmP0B",
	"dglTcd8Fe8TeErviqMKqpeGSGRLOgl5WsYwKHhGWpjBLCUT2wb6qpEdSMRXcR8XWuv6Ficyahw5OZKCk",
	"XpkQz004k0eqMFCqgkdH8YiCa3PGOfRfG8sNZoERoKGQtMv2PKpSm7QkZal2XDh00RjRXOqsqCSVwjUy",
	"3pvK2w1HQYmac9SSL8PstPIRW00sUPNm3h7ojjh2zjDICFvVb5lEsFGa8sUHrCUVuxjbUmfG0t+uHd40",
	"lskx4CYZ4EBMJlfk7mTCbL205gX6lrAXMmcnqIgBGeroLfAW1vWbEExU+hRmoKVTxu2Hon9nOpIkp/oQ",
	"OCaQZx0x66PLKXusULx/HqdygfaQqbwszXZWNoyPKlwM+B+bo58fU/GjRv+TsS/pvxlkK/4MNpq5H9Nm",
	"FfZdtH5DmkkGzjftKiVjmsTuRhbeohLDuQDbi/YnVGOp+X9ZAAeep/VCmFhWDpEo7U1vwpCDglha6Fs0",
	"noXuh3kPIzPJ1YgOEe7G86HDCSaUXaC30qMSK6xs/daFx0wlsoqKlJUBIUDA3NicjyObTS1yDtoeqvbS",
	"lMlRSbTXkbxkXLKszNGyj1sbRfY1wA+BAteSWEqTeOR2Ia1FSg1K3in1S47UgxKy0HMEnqWieSDHV1Ub",
	"4R0gWwQ56CRToTkM6Qto+jrKGVq20YNHxsCWIQGjClXsL1NqNaqfYwFu0xkqAhBmNhDKDjAeElZQm25V",
	"W5DbU54wcSpkhtrxXD625A+Pn23NAUyJOhxLTY1dzuJLbkbPXqaJa8bACQcMGQLPysJYbg8Ddx0SDuwQ",
	"OjSKIXW7mh6UGRQ1bt37hz1X4E8YbrswQCjAx1sdL5zRPJCBIwkFZr6nI7XxU1IUSulYTQNudnd6Z5aH",
	"Z2dxahufSfaTu9M70ztJypeFeKgyc91AfPRs8Wk89QqIZDGgAFmDEMy3yUFoLbvTsO3yPg2CWMac4zzZ",
	"b2fxg6tHe7u7t7ie0F04uG4S3Gwxdsw/Jj4Ogi/qC4588eXunav2axWYDS9G/CFoc/1LY7etLjfCtJkm",
	"jxxFeFjy1LK9ZPCcXp01M+lZViDYnUD0dwL/53saxo0dJRNSdX0CdZFxhIzdwWezUywV9Zv+oavF0KVR",
	"nd6Yb/YWg5Jgi1oaBbryRIUiQ95s4LZC5pB0+ZpVOQmajAfPYAo+VKagfpOB3lUZOmf+0e5ls9stq/e8",
	"C7mSWhLVDMPigZMvXuL55Y1JvBncOXoiRjk0jK+ZLfCAsH67kJmhOudx88SA8J4nM2GENRhgkRepjX1V",
	"oQ2UIh5dUJFsK0sYzNFqsEDPwYJnJVoZeQ11vK4Kx3EZOMO0mXmcMET1RuDkAfp4fJJu3LX8ftw93SOz",
	"l3ieXD7/DWGoOZDaRqEj9gEOPeCwaEZjHxyaX+5+efNL7YU6emFv7zaxvHGJ8eOlwLglboFvHPqzpn/J",
	"4pHYtXlA0VvNd0KlIhjYorCb7oh5k5trou6oL8AHRWB6+wso4EZEbo/NbryKAltXUbp7xXyM11wqpiQ+",
	"7w4/wol8F/M5LqAqfHO9eHjo95vmVHtvaDSrGl8MXfnpZNOVFnjfjPIfkE+jA4UPySb/2+dS4DQb4t4+",
	"k8zvPJPG7it9Kjk0qvtts6eQGmGJHzt3wNdvRHeBoF8BUoGFVDIcqPRYuljLn7ltvSbdvmmk/aejTtcF",
	"5zMrixV8MvHYqHvbENQol6u5sR+DD+HfD+mPWnH+pYLsu5g9n0qUtfreNsxK8KvZRbj6ffn+obY1Vehm",
	"2m1UjUPXk/CLt4/BDm744d3oTfobf4MXb8O/z8/w/lFBfhgmm83Jr+kd4X8qcX+dCW6bCu15+tUDtodg",
	"M+hDJx/ZbN5LbY5gmmFLb7oWjoPCbZKNiY2vX4uFCQPn5mZYGKlRkrW3PLYT6SHYlwGgv9Xd9cGPB9Dj",
	"v09TZIZ8VPuPMpf7Fws+jgp7XUxcPwrsXd9kf119cfP75+Qox5IE3w77pDDVE4XJ+BZ+OFe5CChyuT+b",
	"XeRGgdSX+xelsf4ySZM1WAnzIt7p5m83epqE11pRPmx16kbVb7Xc+q0sLb25xh93/7i79foTYz2Ir589",
	"e7L5I8TuNb5Puj37f1Whgo1N0wR1pci+8RU+ZmHjPm9tfzGOm673e6MiTDPj0UssBT0w3VrCKGLszKiG",
	"nu3axcEXl88v/z8AAP//fUjCg18+AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
