//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerHttpAuthenticationScopes = "bearerHttpAuthentication.Scopes"
)

// Edge Um relacionamento entre recursos
type Edge struct {
	// Class Classe ou Categoria do relacionamento
	Class *string `json:"class,omitempty"`

	// Destination Label único do recurso de destino
	Destination *string `json:"destination,omitempty"`

	// Label Nome do relacionamento que será exibido
	Label *string `json:"label,omitempty"`

	// Source Label único do recurso de origem
	Source *string `json:"source,omitempty"`
}

// Subgraph Recursos e seus relacionamentos apresentados de forma útil para consumo e visualização.
type Subgraph struct {
	// All Se verdadeiro, retorna todos os itens do grafo, mesmo que não estejam conectados diretamente.
	All *bool `json:"all,omitempty"`

	// Edges Lista de relacionamentos que devem ser exibidos no grafo
	Edges *[]Edge `json:"edges,omitempty"`

	// Highlights Elementos que devem ser destacados no grafo
	Highlights *[]Vertex `json:"highlights,omitempty"`

	// Principal Um ativo de TI
	Principal *Vertex `json:"principal,omitempty"`

	// Title Nome que será exibido para a sessão do grafo
	Title *string `json:"title,omitempty"`

	// Vertices Lista de recursos que devem ser exibidos no grafo
	Vertices *[]Vertex `json:"vertices,omitempty"`
}

// Summary Um sumário sobre o estado da infraestrutura
type Summary struct {
	// TotalVertices O número total de recursos presentes na base
	TotalVertices *int `json:"total_vertices,omitempty"`

	// UnhealthyVertices Lista de recursos não saudáveis
	UnhealthyVertices *[]Vertex `json:"unhealthy_vertices,omitempty"`
}

// Vertex Um ativo de TI
type Vertex struct {
	// Class Classe ou Categoria do recurso
	Class *string `json:"class,omitempty"`

	// Health Saúde do recurso. Um recurso pode não estar saudável por causa de um de suas dependências.
	Health *bool `json:"health,omitempty"`

	// Label Nome que será exibido
	Label *string `json:"label,omitempty"`
}

// Label defines model for label.
type Label = string

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

// GetVertexDependantsParams defines parameters for GetVertexDependants.
type GetVertexDependantsParams struct {
	// All Se verdadeiro, retorna todos os dependentes do recurso, mesmo que não estejam conectados diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// GetVertexDependenciesParams defines parameters for GetVertexDependencies.
type GetVertexDependenciesParams struct {
	// All Se verdadeiro, retorna todas as dependências do recurso, mesmo que não estejam conectadas diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(w http.ResponseWriter, r *http.Request)
	// Detalhes de um recurso
	// (GET /vertices/{label})
	GetVertex(w http.ResponseWriter, r *http.Request, label Label)
	// Recursos dependentes
	// (GET /vertices/{label}/dependants)
	GetVertexDependants(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependantsParams)
	// Dependencias de um recurso
	// (GET /vertices/{label}/dependencies)
	GetVertexDependencies(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependenciesParams)
	// Trilhas
	// (GET /vertices/{label}/lineages)
	GetVertexLineages(w http.ResponseWriter, r *http.Request, label Label)
	// Vizinhos
	// (GET /vertices/{label}/neighbors)
	GetVertexNeighbors(w http.ResponseWriter, r *http.Request, label Label)
	// Caminho entre dois recursos
	// (GET /vertices/{label}/path/{destination})
	GetPath(w http.ResponseWriter, r *http.Request, label Label, destination string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Summary operation middleware
func (siw *ServerInterfaceWrapper) Summary(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Summary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertex operation middleware
func (siw *ServerInterfaceWrapper) GetVertex(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertex(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependants operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependants(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependantsParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependants(w, r, label, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependencies operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependencies(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependenciesParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependencies(w, r, label, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexLineages operation middleware
func (siw *ServerInterfaceWrapper) GetVertexLineages(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexLineages(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexNeighbors operation middleware
func (siw *ServerInterfaceWrapper) GetVertexNeighbors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexNeighbors(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPath operation middleware
func (siw *ServerInterfaceWrapper) GetPath(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	// ------------- Path parameter "destination" -------------
	var destination string

	err = runtime.BindStyledParameterWithOptions("simple", "destination", r.PathValue("destination"), &destination, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destination", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPath(w, r, label, destination)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/summary", wrapper.Summary)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}", wrapper.GetVertex)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/dependants", wrapper.GetVertexDependants)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/dependencies", wrapper.GetVertexDependencies)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/lineages", wrapper.GetVertexLineages)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/neighbors", wrapper.GetVertexNeighbors)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/path/{destination}", wrapper.GetPath)

	return m
}

type InternalServerErrorJSONResponse struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

type InvalidRequestJSONResponse struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

type NotFoundJSONResponse struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

type UnauthorizedJSONResponse struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

type SummaryRequestObject struct {
}

type SummaryResponseObject interface {
	VisitSummaryResponse(w http.ResponseWriter) error
}

type Summary200JSONResponse Summary

func (response Summary200JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Summary401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Summary401JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Summary500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Summary500JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexResponseObject interface {
	VisitGetVertexResponse(w http.ResponseWriter) error
}

type GetVertex200JSONResponse Vertex

func (response GetVertex200JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertex401JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertex404JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertex422JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertex500JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependantsRequestObject struct {
	Label  Label `json:"label"`
	Params GetVertexDependantsParams
}

type GetVertexDependantsResponseObject interface {
	VisitGetVertexDependantsResponse(w http.ResponseWriter) error
}

type GetVertexDependants200JSONResponse Subgraph

func (response GetVertexDependants200JSONResponse) VisitGetVertexDependantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependants401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependants401JSONResponse) VisitGetVertexDependantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependants404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependants404JSONResponse) VisitGetVertexDependantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependants422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependants422JSONResponse) VisitGetVertexDependantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependants500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependants500JSONResponse) VisitGetVertexDependantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependenciesRequestObject struct {
	Label  Label `json:"label"`
	Params GetVertexDependenciesParams
}

type GetVertexDependenciesResponseObject interface {
	VisitGetVertexDependenciesResponse(w http.ResponseWriter) error
}

type GetVertexDependencies200JSONResponse Subgraph

func (response GetVertexDependencies200JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependencies401JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependencies404JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependencies422JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependencies500JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineagesRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexLineagesResponseObject interface {
	VisitGetVertexLineagesResponse(w http.ResponseWriter) error
}

type GetVertexLineages200JSONResponse Subgraph

func (response GetVertexLineages200JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexLineages401JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexLineages404JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexLineages422JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexLineages500JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighborsRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexNeighborsResponseObject interface {
	VisitGetVertexNeighborsResponse(w http.ResponseWriter) error
}

type GetVertexNeighbors200JSONResponse Subgraph

func (response GetVertexNeighbors200JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexNeighbors401JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexNeighbors404JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexNeighbors422JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexNeighbors500JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPathRequestObject struct {
	Label       Label  `json:"label"`
	Destination string `json:"destination"`
}

type GetPathResponseObject interface {
	VisitGetPathResponse(w http.ResponseWriter) error
}

type GetPath200JSONResponse Subgraph

func (response GetPath200JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPath401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetPath401JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPath404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPath404JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPath422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetPath422JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetPath500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPath500JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(ctx context.Context, request SummaryRequestObject) (SummaryResponseObject, error)
	// Detalhes de um recurso
	// (GET /vertices/{label})
	GetVertex(ctx context.Context, request GetVertexRequestObject) (GetVertexResponseObject, error)
	// Recursos dependentes
	// (GET /vertices/{label}/dependants)
	GetVertexDependants(ctx context.Context, request GetVertexDependantsRequestObject) (GetVertexDependantsResponseObject, error)
	// Dependencias de um recurso
	// (GET /vertices/{label}/dependencies)
	GetVertexDependencies(ctx context.Context, request GetVertexDependenciesRequestObject) (GetVertexDependenciesResponseObject, error)
	// Trilhas
	// (GET /vertices/{label}/lineages)
	GetVertexLineages(ctx context.Context, request GetVertexLineagesRequestObject) (GetVertexLineagesResponseObject, error)
	// Vizinhos
	// (GET /vertices/{label}/neighbors)
	GetVertexNeighbors(ctx context.Context, request GetVertexNeighborsRequestObject) (GetVertexNeighborsResponseObject, error)
	// Caminho entre dois recursos
	// (GET /vertices/{label}/path/{destination})
	GetPath(ctx context.Context, request GetPathRequestObject) (GetPathResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Summary operation middleware
func (sh *strictHandler) Summary(w http.ResponseWriter, r *http.Request) {
	var request SummaryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Summary(ctx, request.(SummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Summary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SummaryResponseObject); ok {
		if err := validResponse.VisitSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertex operation middleware
func (sh *strictHandler) GetVertex(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertex(ctx, request.(GetVertexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexResponseObject); ok {
		if err := validResponse.VisitGetVertexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependants operation middleware
func (sh *strictHandler) GetVertexDependants(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependantsParams) {
	var request GetVertexDependantsRequestObject

	request.Label = label
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependants(ctx, request.(GetVertexDependantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependants")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependantsResponseObject); ok {
		if err := validResponse.VisitGetVertexDependantsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependencies operation middleware
func (sh *strictHandler) GetVertexDependencies(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependenciesParams) {
	var request GetVertexDependenciesRequestObject

	request.Label = label
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependencies(ctx, request.(GetVertexDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependenciesResponseObject); ok {
		if err := validResponse.VisitGetVertexDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexLineages operation middleware
func (sh *strictHandler) GetVertexLineages(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexLineagesRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexLineages(ctx, request.(GetVertexLineagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexLineages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexLineagesResponseObject); ok {
		if err := validResponse.VisitGetVertexLineagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexNeighbors operation middleware
func (sh *strictHandler) GetVertexNeighbors(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexNeighborsRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexNeighbors(ctx, request.(GetVertexNeighborsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexNeighbors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexNeighborsResponseObject); ok {
		if err := validResponse.VisitGetVertexNeighborsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPath operation middleware
func (sh *strictHandler) GetPath(w http.ResponseWriter, r *http.Request, label Label, destination string) {
	var request GetPathRequestObject

	request.Label = label
	request.Destination = destination

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPath(ctx, request.(GetPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPathResponseObject); ok {
		if err := validResponse.VisitGetPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"1lJqkiYn7C34+eX/BAAA///zDNQ83zYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
