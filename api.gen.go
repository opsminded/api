//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerHttpAuthenticationScopes = "bearerHttpAuthentication.Scopes"
)

// Edge Um relacionamento entre recursos
type Edge struct {
	// Class Classe ou Categoria do relacionamento
	Class string `json:"class"`

	// Key Identificador único do relacionamento
	Key string `json:"key"`

	// Label Nome do relacionamento que será exibido
	Label string `json:"label"`

	// Source Label único do recurso de origem
	Source string `json:"source"`

	// Target Label único do recurso de destino
	Target string `json:"target"`
}

// Subgraph Recursos e seus relacionamentos apresentados de forma útil para consumo e visualização.
type Subgraph struct {
	// All Se verdadeiro, retorna todos os itens do grafo, mesmo que não estejam conectados diretamente.
	All bool `json:"all"`

	// Edges Lista de relacionamentos que devem ser exibidos no grafo
	Edges []Edge `json:"edges"`

	// Highlights Elementos que devem ser destacados no grafo
	Highlights []Vertex `json:"highlights"`

	// Principal Um ativo de TI
	Principal Vertex `json:"principal"`

	// Title Nome que será exibido para a sessão do grafo
	Title string `json:"title"`

	// Vertices Lista de recursos que devem ser exibidos no grafo
	Vertices []Vertex `json:"vertices"`
}

// Summary Um sumário sobre o estado da infraestrutura
type Summary struct {
	// TotalEdges O número total de relacionamentos presentes na base
	TotalEdges int `json:"total_edges"`

	// TotalVertices O número total de recursos presentes na base
	TotalVertices int `json:"total_vertices"`

	// UnhealthyVertices Lista de recursos não saudáveis
	UnhealthyVertices []Vertex `json:"unhealthy_vertices"`
}

// Vertex Um ativo de TI
type Vertex struct {
	// Healthy Saúde do recurso. Um recurso pode não estar saudável por causa de um de suas dependências.
	Healthy bool `json:"healthy"`

	// Key identificador único do recurso
	Key string `json:"key"`

	// Label Nome que será exibido
	Label string `json:"label"`

	// LastCheck O timestamp da última verificação
	LastCheck string `json:"last_check"`
}

// Key defines model for key.
type Key = string

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// GetVertexDependenciesParams defines parameters for GetVertexDependencies.
type GetVertexDependenciesParams struct {
	// All Se verdadeiro, retorna todas as dependências do recurso, mesmo que não estejam conectadas diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// GetVertexDependentsParams defines parameters for GetVertexDependents.
type GetVertexDependentsParams struct {
	// All Se verdadeiro, retorna todos os dependentes do recurso, mesmo que não estejam conectados diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(w http.ResponseWriter, r *http.Request)
	// Limpar status de saúde
	// (POST /vertices/clear-health-status)
	ClearHealthStatus(w http.ResponseWriter, r *http.Request)
	// Detalhes de um recurso
	// (GET /vertices/{key})
	GetVertex(w http.ResponseWriter, r *http.Request, key Key)
	// Dependencias de um recurso
	// (GET /vertices/{key}/dependencies)
	GetVertexDependencies(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependenciesParams)
	// Recursos dependentes
	// (GET /vertices/{key}/dependents)
	GetVertexDependents(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependentsParams)
	// Marcar recurso como não saudável
	// (DELETE /vertices/{key}/healthy)
	MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request, key Key)
	// Marcar recurso como saudável
	// (POST /vertices/{key}/healthy)
	MarkVertexHealthy(w http.ResponseWriter, r *http.Request, key Key)
	// Vizinhos
	// (GET /vertices/{key}/neighbors)
	GetVertexNeighbors(w http.ResponseWriter, r *http.Request, key Key)
	// Caminho entre dois recursos
	// (GET /vertices/{key}/path/{target})
	GetPath(w http.ResponseWriter, r *http.Request, key Key, target string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Summary operation middleware
func (siw *ServerInterfaceWrapper) Summary(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Summary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClearHealthStatus operation middleware
func (siw *ServerInterfaceWrapper) ClearHealthStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClearHealthStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertex operation middleware
func (siw *ServerInterfaceWrapper) GetVertex(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertex(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependencies operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependencies(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependenciesParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependencies(w, r, key, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependents operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependentsParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependents(w, r, key, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkVertexUnhealthy operation middleware
func (siw *ServerInterfaceWrapper) MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkVertexUnhealthy(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkVertexHealthy operation middleware
func (siw *ServerInterfaceWrapper) MarkVertexHealthy(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkVertexHealthy(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexNeighbors operation middleware
func (siw *ServerInterfaceWrapper) GetVertexNeighbors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexNeighbors(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPath operation middleware
func (siw *ServerInterfaceWrapper) GetPath(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Path parameter "target" -------------
	var target string

	err = runtime.BindStyledParameterWithOptions("simple", "target", r.PathValue("target"), &target, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "target", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPath(w, r, key, target)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/summary", wrapper.Summary)
	m.HandleFunc("POST "+options.BaseURL+"/vertices/clear-health-status", wrapper.ClearHealthStatus)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}", wrapper.GetVertex)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/dependencies", wrapper.GetVertexDependencies)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/dependents", wrapper.GetVertexDependents)
	m.HandleFunc("DELETE "+options.BaseURL+"/vertices/{key}/healthy", wrapper.MarkVertexUnhealthy)
	m.HandleFunc("POST "+options.BaseURL+"/vertices/{key}/healthy", wrapper.MarkVertexHealthy)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/neighbors", wrapper.GetVertexNeighbors)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/path/{target}", wrapper.GetPath)

	return m
}

type InternalServerErrorJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type InvalidRequestJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type NotFoundJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type UnauthorizedJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type SummaryRequestObject struct {
}

type SummaryResponseObject interface {
	VisitSummaryResponse(w http.ResponseWriter) error
}

type Summary200JSONResponse Summary

func (response Summary200JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Summary401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Summary401JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Summary500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Summary500JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClearHealthStatusRequestObject struct {
}

type ClearHealthStatusResponseObject interface {
	VisitClearHealthStatusResponse(w http.ResponseWriter) error
}

type ClearHealthStatus200Response struct {
}

func (response ClearHealthStatus200Response) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ClearHealthStatus401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ClearHealthStatus401JSONResponse) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ClearHealthStatus500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ClearHealthStatus500JSONResponse) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexResponseObject interface {
	VisitGetVertexResponse(w http.ResponseWriter) error
}

type GetVertex200JSONResponse Vertex

func (response GetVertex200JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertex401JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertex404JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertex422JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertex500JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependenciesRequestObject struct {
	Key    Key `json:"key"`
	Params GetVertexDependenciesParams
}

type GetVertexDependenciesResponseObject interface {
	VisitGetVertexDependenciesResponse(w http.ResponseWriter) error
}

type GetVertexDependencies200JSONResponse Subgraph

func (response GetVertexDependencies200JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependencies401JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependencies404JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependencies422JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependencies500JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependentsRequestObject struct {
	Key    Key `json:"key"`
	Params GetVertexDependentsParams
}

type GetVertexDependentsResponseObject interface {
	VisitGetVertexDependentsResponse(w http.ResponseWriter) error
}

type GetVertexDependents200JSONResponse Subgraph

func (response GetVertexDependents200JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependents401JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependents404JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependents422JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependents500JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthyRequestObject struct {
	Key Key `json:"key"`
}

type MarkVertexUnhealthyResponseObject interface {
	VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error
}

type MarkVertexUnhealthy200Response struct {
}

func (response MarkVertexUnhealthy200Response) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MarkVertexUnhealthy401JSONResponse struct{ UnauthorizedJSONResponse }

func (response MarkVertexUnhealthy401JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy404JSONResponse struct{ NotFoundJSONResponse }

func (response MarkVertexUnhealthy404JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy422JSONResponse struct{ InvalidRequestJSONResponse }

func (response MarkVertexUnhealthy422JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response MarkVertexUnhealthy500JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthyRequestObject struct {
	Key Key `json:"key"`
}

type MarkVertexHealthyResponseObject interface {
	VisitMarkVertexHealthyResponse(w http.ResponseWriter) error
}

type MarkVertexHealthy200Response struct {
}

func (response MarkVertexHealthy200Response) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MarkVertexHealthy401JSONResponse struct{ UnauthorizedJSONResponse }

func (response MarkVertexHealthy401JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthy404JSONResponse struct{ NotFoundJSONResponse }

func (response MarkVertexHealthy404JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthy422JSONResponse struct{ InvalidRequestJSONResponse }

func (response MarkVertexHealthy422JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthy500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response MarkVertexHealthy500JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighborsRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexNeighborsResponseObject interface {
	VisitGetVertexNeighborsResponse(w http.ResponseWriter) error
}

type GetVertexNeighbors200JSONResponse Subgraph

func (response GetVertexNeighbors200JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexNeighbors401JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexNeighbors404JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexNeighbors422JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexNeighbors500JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPathRequestObject struct {
	Key    Key    `json:"key"`
	Target string `json:"target"`
}

type GetPathResponseObject interface {
	VisitGetPathResponse(w http.ResponseWriter) error
}

type GetPath200JSONResponse Subgraph

func (response GetPath200JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPath401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetPath401JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPath404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPath404JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPath422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetPath422JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetPath500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPath500JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(ctx context.Context, request SummaryRequestObject) (SummaryResponseObject, error)
	// Limpar status de saúde
	// (POST /vertices/clear-health-status)
	ClearHealthStatus(ctx context.Context, request ClearHealthStatusRequestObject) (ClearHealthStatusResponseObject, error)
	// Detalhes de um recurso
	// (GET /vertices/{key})
	GetVertex(ctx context.Context, request GetVertexRequestObject) (GetVertexResponseObject, error)
	// Dependencias de um recurso
	// (GET /vertices/{key}/dependencies)
	GetVertexDependencies(ctx context.Context, request GetVertexDependenciesRequestObject) (GetVertexDependenciesResponseObject, error)
	// Recursos dependentes
	// (GET /vertices/{key}/dependents)
	GetVertexDependents(ctx context.Context, request GetVertexDependentsRequestObject) (GetVertexDependentsResponseObject, error)
	// Marcar recurso como não saudável
	// (DELETE /vertices/{key}/healthy)
	MarkVertexUnhealthy(ctx context.Context, request MarkVertexUnhealthyRequestObject) (MarkVertexUnhealthyResponseObject, error)
	// Marcar recurso como saudável
	// (POST /vertices/{key}/healthy)
	MarkVertexHealthy(ctx context.Context, request MarkVertexHealthyRequestObject) (MarkVertexHealthyResponseObject, error)
	// Vizinhos
	// (GET /vertices/{key}/neighbors)
	GetVertexNeighbors(ctx context.Context, request GetVertexNeighborsRequestObject) (GetVertexNeighborsResponseObject, error)
	// Caminho entre dois recursos
	// (GET /vertices/{key}/path/{target})
	GetPath(ctx context.Context, request GetPathRequestObject) (GetPathResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Summary operation middleware
func (sh *strictHandler) Summary(w http.ResponseWriter, r *http.Request) {
	var request SummaryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Summary(ctx, request.(SummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Summary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SummaryResponseObject); ok {
		if err := validResponse.VisitSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClearHealthStatus operation middleware
func (sh *strictHandler) ClearHealthStatus(w http.ResponseWriter, r *http.Request) {
	var request ClearHealthStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClearHealthStatus(ctx, request.(ClearHealthStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClearHealthStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClearHealthStatusResponseObject); ok {
		if err := validResponse.VisitClearHealthStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertex operation middleware
func (sh *strictHandler) GetVertex(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertex(ctx, request.(GetVertexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexResponseObject); ok {
		if err := validResponse.VisitGetVertexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependencies operation middleware
func (sh *strictHandler) GetVertexDependencies(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependenciesParams) {
	var request GetVertexDependenciesRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependencies(ctx, request.(GetVertexDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependenciesResponseObject); ok {
		if err := validResponse.VisitGetVertexDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependents operation middleware
func (sh *strictHandler) GetVertexDependents(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependentsParams) {
	var request GetVertexDependentsRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependents(ctx, request.(GetVertexDependentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependentsResponseObject); ok {
		if err := validResponse.VisitGetVertexDependentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MarkVertexUnhealthy operation middleware
func (sh *strictHandler) MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request, key Key) {
	var request MarkVertexUnhealthyRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MarkVertexUnhealthy(ctx, request.(MarkVertexUnhealthyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkVertexUnhealthy")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MarkVertexUnhealthyResponseObject); ok {
		if err := validResponse.VisitMarkVertexUnhealthyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MarkVertexHealthy operation middleware
func (sh *strictHandler) MarkVertexHealthy(w http.ResponseWriter, r *http.Request, key Key) {
	var request MarkVertexHealthyRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MarkVertexHealthy(ctx, request.(MarkVertexHealthyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkVertexHealthy")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MarkVertexHealthyResponseObject); ok {
		if err := validResponse.VisitMarkVertexHealthyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexNeighbors operation middleware
func (sh *strictHandler) GetVertexNeighbors(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexNeighborsRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexNeighbors(ctx, request.(GetVertexNeighborsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexNeighbors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexNeighborsResponseObject); ok {
		if err := validResponse.VisitGetVertexNeighborsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPath operation middleware
func (sh *strictHandler) GetPath(w http.ResponseWriter, r *http.Request, key Key, target string) {
	var request GetPathRequestObject

	request.Key = key
	request.Target = target

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPath(ctx, request.(GetPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPathResponseObject); ok {
		if err := validResponse.VisitGetPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
