//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerHttpAuthenticationScopes = "bearerHttpAuthentication.Scopes"
)

// Edge Um relacionamento entre recursos
type Edge struct {
	// Class Classe ou Categoria do relacionamento
	Class string `json:"class"`

	// Key Identificador único do relacionamento
	Key string `json:"key"`

	// Label Nome do relacionamento que será exibido
	Label string `json:"label"`

	// Source Label único do recurso de origem
	Source string `json:"source"`

	// Target Label único do recurso de destino
	Target string `json:"target"`
}

// Subgraph Recursos e seus relacionamentos apresentados de forma útil para consumo e visualização.
type Subgraph struct {
	// All Se verdadeiro, retorna todos os itens do grafo, mesmo que não estejam conectados diretamente.
	All bool `json:"all"`

	// Edges Lista de relacionamentos que devem ser exibidos no grafo
	Edges []Edge `json:"edges"`

	// Highlights Elementos que devem ser destacados no grafo
	Highlights []Vertex `json:"highlights"`

	// Principal Um ativo de TI
	Principal Vertex `json:"principal"`

	// Title Nome que será exibido para a sessão do grafo
	Title string `json:"title"`

	// Vertices Lista de recursos que devem ser exibidos no grafo
	Vertices []Vertex `json:"vertices"`
}

// Summary Um sumário sobre o estado da infraestrutura
type Summary struct {
	// TotalEdges O número total de relacionamentos presentes na base
	TotalEdges int `json:"total_edges"`

	// TotalVertices O número total de recursos presentes na base
	TotalVertices int `json:"total_vertices"`

	// UnhealthyVertices Lista de recursos não saudáveis
	UnhealthyVertices []Vertex `json:"unhealthy_vertices"`
}

// Vertex Um ativo de TI
type Vertex struct {
	// Class Classe do ativo
	Class string `json:"class"`

	// Healthy Saúde do recurso. Um recurso pode não estar saudável por causa de um de suas dependências.
	Healthy bool `json:"healthy"`

	// Key identificador único do recurso
	Key string `json:"key"`

	// Label Nome que será exibido
	Label string `json:"label"`

	// LastCheck O timestamp da última verificação
	LastCheck string `json:"last_check"`
}

// VertexAttrubutes Lista de atributos do recurso
type VertexAttrubutes = []struct {
	// Description Descrição do atributo
	Description string `json:"description"`

	// Type Tipo do atributo
	Type string `json:"type"`

	// Value Valor do atributo, que pode ser string, número ou booleano
	Value VertexAttrubutes_Value `json:"value"`
}

// VertexAttrubutesValue0 defines model for .
type VertexAttrubutesValue0 = string

// VertexAttrubutesValue1 defines model for .
type VertexAttrubutesValue1 = int

// VertexAttrubutesValue2 defines model for .
type VertexAttrubutesValue2 = bool

// VertexAttrubutes_Value Valor do atributo, que pode ser string, número ou booleano
type VertexAttrubutes_Value struct {
	union json.RawMessage
}

// Key defines model for key.
type Key = string

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// GetVertexDependenciesParams defines parameters for GetVertexDependencies.
type GetVertexDependenciesParams struct {
	// All Se verdadeiro, retorna todas as dependências do recurso, mesmo que não estejam conectadas diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// GetVertexDependentsParams defines parameters for GetVertexDependents.
type GetVertexDependentsParams struct {
	// All Se verdadeiro, retorna todos os dependentes do recurso, mesmo que não estejam conectados diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// AsVertexAttrubutesValue0 returns the union data inside the VertexAttrubutes_Value as a VertexAttrubutesValue0
func (t VertexAttrubutes_Value) AsVertexAttrubutesValue0() (VertexAttrubutesValue0, error) {
	var body VertexAttrubutesValue0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVertexAttrubutesValue0 overwrites any union data inside the VertexAttrubutes_Value as the provided VertexAttrubutesValue0
func (t *VertexAttrubutes_Value) FromVertexAttrubutesValue0(v VertexAttrubutesValue0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVertexAttrubutesValue0 performs a merge with any union data inside the VertexAttrubutes_Value, using the provided VertexAttrubutesValue0
func (t *VertexAttrubutes_Value) MergeVertexAttrubutesValue0(v VertexAttrubutesValue0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVertexAttrubutesValue1 returns the union data inside the VertexAttrubutes_Value as a VertexAttrubutesValue1
func (t VertexAttrubutes_Value) AsVertexAttrubutesValue1() (VertexAttrubutesValue1, error) {
	var body VertexAttrubutesValue1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVertexAttrubutesValue1 overwrites any union data inside the VertexAttrubutes_Value as the provided VertexAttrubutesValue1
func (t *VertexAttrubutes_Value) FromVertexAttrubutesValue1(v VertexAttrubutesValue1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVertexAttrubutesValue1 performs a merge with any union data inside the VertexAttrubutes_Value, using the provided VertexAttrubutesValue1
func (t *VertexAttrubutes_Value) MergeVertexAttrubutesValue1(v VertexAttrubutesValue1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsVertexAttrubutesValue2 returns the union data inside the VertexAttrubutes_Value as a VertexAttrubutesValue2
func (t VertexAttrubutes_Value) AsVertexAttrubutesValue2() (VertexAttrubutesValue2, error) {
	var body VertexAttrubutesValue2
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromVertexAttrubutesValue2 overwrites any union data inside the VertexAttrubutes_Value as the provided VertexAttrubutesValue2
func (t *VertexAttrubutes_Value) FromVertexAttrubutesValue2(v VertexAttrubutesValue2) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeVertexAttrubutesValue2 performs a merge with any union data inside the VertexAttrubutes_Value, using the provided VertexAttrubutesValue2
func (t *VertexAttrubutes_Value) MergeVertexAttrubutesValue2(v VertexAttrubutesValue2) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t VertexAttrubutes_Value) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *VertexAttrubutes_Value) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(w http.ResponseWriter, r *http.Request)
	// Limpar status de saúde
	// (POST /vertices/clear-health-status)
	ClearHealthStatus(w http.ResponseWriter, r *http.Request)
	// Detalhes de um recurso
	// (GET /vertices/{key})
	GetVertex(w http.ResponseWriter, r *http.Request, key Key)
	// Atributos de um recurso
	// (GET /vertices/{key}/attributes)
	GetVertexAttributes(w http.ResponseWriter, r *http.Request, key Key)
	// Dependencias de um recurso
	// (GET /vertices/{key}/dependencies)
	GetVertexDependencies(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependenciesParams)
	// Recursos dependentes
	// (GET /vertices/{key}/dependents)
	GetVertexDependents(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependentsParams)
	// Marcar recurso como não saudável
	// (DELETE /vertices/{key}/healthy)
	MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request, key Key)
	// Marcar recurso como saudável
	// (POST /vertices/{key}/healthy)
	MarkVertexHealthy(w http.ResponseWriter, r *http.Request, key Key)
	// Vizinhos
	// (GET /vertices/{key}/neighbors)
	GetVertexNeighbors(w http.ResponseWriter, r *http.Request, key Key)
	// Caminho entre dois recursos
	// (GET /vertices/{key}/path/{target})
	GetPath(w http.ResponseWriter, r *http.Request, key Key, target string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Summary operation middleware
func (siw *ServerInterfaceWrapper) Summary(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Summary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClearHealthStatus operation middleware
func (siw *ServerInterfaceWrapper) ClearHealthStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClearHealthStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertex operation middleware
func (siw *ServerInterfaceWrapper) GetVertex(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertex(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexAttributes operation middleware
func (siw *ServerInterfaceWrapper) GetVertexAttributes(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexAttributes(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependencies operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependencies(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependenciesParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependencies(w, r, key, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependents operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependentsParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependents(w, r, key, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkVertexUnhealthy operation middleware
func (siw *ServerInterfaceWrapper) MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkVertexUnhealthy(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkVertexHealthy operation middleware
func (siw *ServerInterfaceWrapper) MarkVertexHealthy(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkVertexHealthy(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexNeighbors operation middleware
func (siw *ServerInterfaceWrapper) GetVertexNeighbors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexNeighbors(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPath operation middleware
func (siw *ServerInterfaceWrapper) GetPath(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Path parameter "target" -------------
	var target string

	err = runtime.BindStyledParameterWithOptions("simple", "target", r.PathValue("target"), &target, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "target", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPath(w, r, key, target)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/summary", wrapper.Summary)
	m.HandleFunc("POST "+options.BaseURL+"/vertices/clear-health-status", wrapper.ClearHealthStatus)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}", wrapper.GetVertex)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/attributes", wrapper.GetVertexAttributes)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/dependencies", wrapper.GetVertexDependencies)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/dependents", wrapper.GetVertexDependents)
	m.HandleFunc("DELETE "+options.BaseURL+"/vertices/{key}/healthy", wrapper.MarkVertexUnhealthy)
	m.HandleFunc("POST "+options.BaseURL+"/vertices/{key}/healthy", wrapper.MarkVertexHealthy)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/neighbors", wrapper.GetVertexNeighbors)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/path/{target}", wrapper.GetPath)

	return m
}

type InternalServerErrorJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type InvalidRequestJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type NotFoundJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type UnauthorizedJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type SummaryRequestObject struct {
}

type SummaryResponseObject interface {
	VisitSummaryResponse(w http.ResponseWriter) error
}

type Summary200JSONResponse Summary

func (response Summary200JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Summary401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Summary401JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Summary500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Summary500JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClearHealthStatusRequestObject struct {
}

type ClearHealthStatusResponseObject interface {
	VisitClearHealthStatusResponse(w http.ResponseWriter) error
}

type ClearHealthStatus200Response struct {
}

func (response ClearHealthStatus200Response) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ClearHealthStatus401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ClearHealthStatus401JSONResponse) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ClearHealthStatus500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ClearHealthStatus500JSONResponse) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexResponseObject interface {
	VisitGetVertexResponse(w http.ResponseWriter) error
}

type GetVertex200JSONResponse Vertex

func (response GetVertex200JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertex401JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertex404JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertex422JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertex500JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexAttributesRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexAttributesResponseObject interface {
	VisitGetVertexAttributesResponse(w http.ResponseWriter) error
}

type GetVertexAttributes200JSONResponse VertexAttrubutes

func (response GetVertexAttributes200JSONResponse) VisitGetVertexAttributesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexAttributes401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexAttributes401JSONResponse) VisitGetVertexAttributesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexAttributes404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexAttributes404JSONResponse) VisitGetVertexAttributesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexAttributes422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexAttributes422JSONResponse) VisitGetVertexAttributesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexAttributes500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexAttributes500JSONResponse) VisitGetVertexAttributesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependenciesRequestObject struct {
	Key    Key `json:"key"`
	Params GetVertexDependenciesParams
}

type GetVertexDependenciesResponseObject interface {
	VisitGetVertexDependenciesResponse(w http.ResponseWriter) error
}

type GetVertexDependencies200JSONResponse Subgraph

func (response GetVertexDependencies200JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependencies401JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependencies404JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependencies422JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependencies500JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependentsRequestObject struct {
	Key    Key `json:"key"`
	Params GetVertexDependentsParams
}

type GetVertexDependentsResponseObject interface {
	VisitGetVertexDependentsResponse(w http.ResponseWriter) error
}

type GetVertexDependents200JSONResponse Subgraph

func (response GetVertexDependents200JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependents401JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependents404JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependents422JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependents500JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthyRequestObject struct {
	Key Key `json:"key"`
}

type MarkVertexUnhealthyResponseObject interface {
	VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error
}

type MarkVertexUnhealthy200Response struct {
}

func (response MarkVertexUnhealthy200Response) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MarkVertexUnhealthy401JSONResponse struct{ UnauthorizedJSONResponse }

func (response MarkVertexUnhealthy401JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy404JSONResponse struct{ NotFoundJSONResponse }

func (response MarkVertexUnhealthy404JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy422JSONResponse struct{ InvalidRequestJSONResponse }

func (response MarkVertexUnhealthy422JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response MarkVertexUnhealthy500JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthyRequestObject struct {
	Key Key `json:"key"`
}

type MarkVertexHealthyResponseObject interface {
	VisitMarkVertexHealthyResponse(w http.ResponseWriter) error
}

type MarkVertexHealthy200Response struct {
}

func (response MarkVertexHealthy200Response) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MarkVertexHealthy401JSONResponse struct{ UnauthorizedJSONResponse }

func (response MarkVertexHealthy401JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthy404JSONResponse struct{ NotFoundJSONResponse }

func (response MarkVertexHealthy404JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthy422JSONResponse struct{ InvalidRequestJSONResponse }

func (response MarkVertexHealthy422JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexHealthy500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response MarkVertexHealthy500JSONResponse) VisitMarkVertexHealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighborsRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexNeighborsResponseObject interface {
	VisitGetVertexNeighborsResponse(w http.ResponseWriter) error
}

type GetVertexNeighbors200JSONResponse Subgraph

func (response GetVertexNeighbors200JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexNeighbors401JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexNeighbors404JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexNeighbors422JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexNeighbors500JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPathRequestObject struct {
	Key    Key    `json:"key"`
	Target string `json:"target"`
}

type GetPathResponseObject interface {
	VisitGetPathResponse(w http.ResponseWriter) error
}

type GetPath200JSONResponse Subgraph

func (response GetPath200JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPath401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetPath401JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPath404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPath404JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPath422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetPath422JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetPath500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPath500JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(ctx context.Context, request SummaryRequestObject) (SummaryResponseObject, error)
	// Limpar status de saúde
	// (POST /vertices/clear-health-status)
	ClearHealthStatus(ctx context.Context, request ClearHealthStatusRequestObject) (ClearHealthStatusResponseObject, error)
	// Detalhes de um recurso
	// (GET /vertices/{key})
	GetVertex(ctx context.Context, request GetVertexRequestObject) (GetVertexResponseObject, error)
	// Atributos de um recurso
	// (GET /vertices/{key}/attributes)
	GetVertexAttributes(ctx context.Context, request GetVertexAttributesRequestObject) (GetVertexAttributesResponseObject, error)
	// Dependencias de um recurso
	// (GET /vertices/{key}/dependencies)
	GetVertexDependencies(ctx context.Context, request GetVertexDependenciesRequestObject) (GetVertexDependenciesResponseObject, error)
	// Recursos dependentes
	// (GET /vertices/{key}/dependents)
	GetVertexDependents(ctx context.Context, request GetVertexDependentsRequestObject) (GetVertexDependentsResponseObject, error)
	// Marcar recurso como não saudável
	// (DELETE /vertices/{key}/healthy)
	MarkVertexUnhealthy(ctx context.Context, request MarkVertexUnhealthyRequestObject) (MarkVertexUnhealthyResponseObject, error)
	// Marcar recurso como saudável
	// (POST /vertices/{key}/healthy)
	MarkVertexHealthy(ctx context.Context, request MarkVertexHealthyRequestObject) (MarkVertexHealthyResponseObject, error)
	// Vizinhos
	// (GET /vertices/{key}/neighbors)
	GetVertexNeighbors(ctx context.Context, request GetVertexNeighborsRequestObject) (GetVertexNeighborsResponseObject, error)
	// Caminho entre dois recursos
	// (GET /vertices/{key}/path/{target})
	GetPath(ctx context.Context, request GetPathRequestObject) (GetPathResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Summary operation middleware
func (sh *strictHandler) Summary(w http.ResponseWriter, r *http.Request) {
	var request SummaryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Summary(ctx, request.(SummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Summary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SummaryResponseObject); ok {
		if err := validResponse.VisitSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClearHealthStatus operation middleware
func (sh *strictHandler) ClearHealthStatus(w http.ResponseWriter, r *http.Request) {
	var request ClearHealthStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClearHealthStatus(ctx, request.(ClearHealthStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClearHealthStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClearHealthStatusResponseObject); ok {
		if err := validResponse.VisitClearHealthStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertex operation middleware
func (sh *strictHandler) GetVertex(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertex(ctx, request.(GetVertexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexResponseObject); ok {
		if err := validResponse.VisitGetVertexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexAttributes operation middleware
func (sh *strictHandler) GetVertexAttributes(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexAttributesRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexAttributes(ctx, request.(GetVertexAttributesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexAttributes")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexAttributesResponseObject); ok {
		if err := validResponse.VisitGetVertexAttributesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependencies operation middleware
func (sh *strictHandler) GetVertexDependencies(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependenciesParams) {
	var request GetVertexDependenciesRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependencies(ctx, request.(GetVertexDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependenciesResponseObject); ok {
		if err := validResponse.VisitGetVertexDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependents operation middleware
func (sh *strictHandler) GetVertexDependents(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependentsParams) {
	var request GetVertexDependentsRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependents(ctx, request.(GetVertexDependentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependentsResponseObject); ok {
		if err := validResponse.VisitGetVertexDependentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MarkVertexUnhealthy operation middleware
func (sh *strictHandler) MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request, key Key) {
	var request MarkVertexUnhealthyRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MarkVertexUnhealthy(ctx, request.(MarkVertexUnhealthyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkVertexUnhealthy")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MarkVertexUnhealthyResponseObject); ok {
		if err := validResponse.VisitMarkVertexUnhealthyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MarkVertexHealthy operation middleware
func (sh *strictHandler) MarkVertexHealthy(w http.ResponseWriter, r *http.Request, key Key) {
	var request MarkVertexHealthyRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MarkVertexHealthy(ctx, request.(MarkVertexHealthyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkVertexHealthy")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MarkVertexHealthyResponseObject); ok {
		if err := validResponse.VisitMarkVertexHealthyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexNeighbors operation middleware
func (sh *strictHandler) GetVertexNeighbors(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexNeighborsRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexNeighbors(ctx, request.(GetVertexNeighborsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexNeighbors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexNeighborsResponseObject); ok {
		if err := validResponse.VisitGetVertexNeighborsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPath operation middleware
func (sh *strictHandler) GetPath(w http.ResponseWriter, r *http.Request, key Key, target string) {
	var request GetPathRequestObject

	request.Key = key
	request.Target = target

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPath(ctx, request.(GetPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPathResponseObject); ok {
		if err := validResponse.VisitGetPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"VHw9cxhL2/ps8MPVydX/BQAA//+HesR3PEMAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
