//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerHttpAuthenticationScopes = "bearerHttpAuthentication.Scopes"
)

// Edge Um relacionamento entre recursos
type Edge struct {
	// Class Classe ou Categoria do relacionamento
	Class string `json:"class"`

	// Key Identificador único do relacionamento
	Key string `json:"key"`

	// Label Nome do relacionamento que será exibido
	Label string `json:"label"`

	// Source Label único do recurso de origem
	Source string `json:"source"`

	// Target Label único do recurso de destino
	Target string `json:"target"`
}

// Subgraph Recursos e seus relacionamentos apresentados de forma útil para consumo e visualização.
type Subgraph struct {
	// All Se verdadeiro, retorna todos os itens do grafo, mesmo que não estejam conectados diretamente.
	All bool `json:"all"`

	// Edges Lista de relacionamentos que devem ser exibidos no grafo
	Edges []Edge `json:"edges"`

	// Highlights Elementos que devem ser destacados no grafo
	Highlights []Vertex `json:"highlights"`

	// Principal Um ativo de TI
	Principal Vertex `json:"principal"`

	// Title Nome que será exibido para a sessão do grafo
	Title string `json:"title"`

	// Vertices Lista de recursos que devem ser exibidos no grafo
	Vertices []Vertex `json:"vertices"`
}

// Summary Um sumário sobre o estado da infraestrutura
type Summary struct {
	// TotalEdges O número total de relacionamentos presentes na base
	TotalEdges int `json:"total_edges"`

	// TotalVertices O número total de recursos presentes na base
	TotalVertices int `json:"total_vertices"`

	// UnhealthyVertices Lista de recursos não saudáveis
	UnhealthyVertices []Vertex `json:"unhealthy_vertices"`
}

// Vertex Um ativo de TI
type Vertex struct {
	// Healthy Saúde do recurso. Um recurso pode não estar saudável por causa de um de suas dependências.
	Healthy bool `json:"healthy"`

	// Key identificador único do recurso
	Key string `json:"key"`

	// Label Nome que será exibido
	Label string `json:"label"`

	// LastCheck O timestamp da última verificação
	LastCheck string `json:"last_check"`
}

// Key defines model for key.
type Key = string

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// GetVertexDependenciesParams defines parameters for GetVertexDependencies.
type GetVertexDependenciesParams struct {
	// All Se verdadeiro, retorna todas as dependências do recurso, mesmo que não estejam conectadas diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// GetVertexDependentsParams defines parameters for GetVertexDependents.
type GetVertexDependentsParams struct {
	// All Se verdadeiro, retorna todos os dependentes do recurso, mesmo que não estejam conectados diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(w http.ResponseWriter, r *http.Request)
	// Limpar status de saúde
	// (POST /vertices/clear-health-status)
	ClearHealthStatus(w http.ResponseWriter, r *http.Request)
	// Detalhes de um recurso
	// (GET /vertices/{key})
	GetVertex(w http.ResponseWriter, r *http.Request, key Key)
	// Dependencias de um recurso
	// (GET /vertices/{key}/dependencies)
	GetVertexDependencies(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependenciesParams)
	// Recursos dependentes
	// (GET /vertices/{key}/dependents)
	GetVertexDependents(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependentsParams)
	// Vizinhos
	// (GET /vertices/{key}/neighbors)
	GetVertexNeighbors(w http.ResponseWriter, r *http.Request, key Key)
	// Caminho entre dois recursos
	// (GET /vertices/{key}/path/{target})
	GetPath(w http.ResponseWriter, r *http.Request, key Key, target string)
	// Marcar recurso como não saudável
	// (POST /vertices/{key}/unhealthy)
	MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request, key Key)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Summary operation middleware
func (siw *ServerInterfaceWrapper) Summary(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Summary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ClearHealthStatus operation middleware
func (siw *ServerInterfaceWrapper) ClearHealthStatus(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ClearHealthStatus(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertex operation middleware
func (siw *ServerInterfaceWrapper) GetVertex(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertex(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependencies operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependencies(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependenciesParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependencies(w, r, key, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependents operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependentsParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependents(w, r, key, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexNeighbors operation middleware
func (siw *ServerInterfaceWrapper) GetVertexNeighbors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexNeighbors(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPath operation middleware
func (siw *ServerInterfaceWrapper) GetPath(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	// ------------- Path parameter "target" -------------
	var target string

	err = runtime.BindStyledParameterWithOptions("simple", "target", r.PathValue("target"), &target, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "target", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPath(w, r, key, target)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// MarkVertexUnhealthy operation middleware
func (siw *ServerInterfaceWrapper) MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "key" -------------
	var key Key

	err = runtime.BindStyledParameterWithOptions("simple", "key", r.PathValue("key"), &key, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "key", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.MarkVertexUnhealthy(w, r, key)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/summary", wrapper.Summary)
	m.HandleFunc("POST "+options.BaseURL+"/vertices/clear-health-status", wrapper.ClearHealthStatus)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}", wrapper.GetVertex)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/dependencies", wrapper.GetVertexDependencies)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/dependents", wrapper.GetVertexDependents)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/neighbors", wrapper.GetVertexNeighbors)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{key}/path/{target}", wrapper.GetPath)
	m.HandleFunc("POST "+options.BaseURL+"/vertices/{key}/unhealthy", wrapper.MarkVertexUnhealthy)

	return m
}

type InternalServerErrorJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type InvalidRequestJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type NotFoundJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type UnauthorizedJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type SummaryRequestObject struct {
}

type SummaryResponseObject interface {
	VisitSummaryResponse(w http.ResponseWriter) error
}

type Summary200JSONResponse Summary

func (response Summary200JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Summary401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Summary401JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Summary500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Summary500JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type ClearHealthStatusRequestObject struct {
}

type ClearHealthStatusResponseObject interface {
	VisitClearHealthStatusResponse(w http.ResponseWriter) error
}

type ClearHealthStatus200Response struct {
}

func (response ClearHealthStatus200Response) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type ClearHealthStatus401JSONResponse struct{ UnauthorizedJSONResponse }

func (response ClearHealthStatus401JSONResponse) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type ClearHealthStatus500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response ClearHealthStatus500JSONResponse) VisitClearHealthStatusResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexResponseObject interface {
	VisitGetVertexResponse(w http.ResponseWriter) error
}

type GetVertex200JSONResponse Vertex

func (response GetVertex200JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertex401JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertex404JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertex422JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertex500JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependenciesRequestObject struct {
	Key    Key `json:"key"`
	Params GetVertexDependenciesParams
}

type GetVertexDependenciesResponseObject interface {
	VisitGetVertexDependenciesResponse(w http.ResponseWriter) error
}

type GetVertexDependencies200JSONResponse Subgraph

func (response GetVertexDependencies200JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependencies401JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependencies404JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependencies422JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependencies500JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependentsRequestObject struct {
	Key    Key `json:"key"`
	Params GetVertexDependentsParams
}

type GetVertexDependentsResponseObject interface {
	VisitGetVertexDependentsResponse(w http.ResponseWriter) error
}

type GetVertexDependents200JSONResponse Subgraph

func (response GetVertexDependents200JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependents401JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependents404JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependents422JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependents500JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighborsRequestObject struct {
	Key Key `json:"key"`
}

type GetVertexNeighborsResponseObject interface {
	VisitGetVertexNeighborsResponse(w http.ResponseWriter) error
}

type GetVertexNeighbors200JSONResponse Subgraph

func (response GetVertexNeighbors200JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexNeighbors401JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexNeighbors404JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexNeighbors422JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexNeighbors500JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPathRequestObject struct {
	Key    Key    `json:"key"`
	Target string `json:"target"`
}

type GetPathResponseObject interface {
	VisitGetPathResponse(w http.ResponseWriter) error
}

type GetPath200JSONResponse Subgraph

func (response GetPath200JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPath401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetPath401JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPath404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPath404JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPath422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetPath422JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetPath500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPath500JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthyRequestObject struct {
	Key Key `json:"key"`
}

type MarkVertexUnhealthyResponseObject interface {
	VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error
}

type MarkVertexUnhealthy200Response struct {
}

func (response MarkVertexUnhealthy200Response) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type MarkVertexUnhealthy401JSONResponse struct{ UnauthorizedJSONResponse }

func (response MarkVertexUnhealthy401JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy404JSONResponse struct{ NotFoundJSONResponse }

func (response MarkVertexUnhealthy404JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy422JSONResponse struct{ InvalidRequestJSONResponse }

func (response MarkVertexUnhealthy422JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type MarkVertexUnhealthy500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response MarkVertexUnhealthy500JSONResponse) VisitMarkVertexUnhealthyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(ctx context.Context, request SummaryRequestObject) (SummaryResponseObject, error)
	// Limpar status de saúde
	// (POST /vertices/clear-health-status)
	ClearHealthStatus(ctx context.Context, request ClearHealthStatusRequestObject) (ClearHealthStatusResponseObject, error)
	// Detalhes de um recurso
	// (GET /vertices/{key})
	GetVertex(ctx context.Context, request GetVertexRequestObject) (GetVertexResponseObject, error)
	// Dependencias de um recurso
	// (GET /vertices/{key}/dependencies)
	GetVertexDependencies(ctx context.Context, request GetVertexDependenciesRequestObject) (GetVertexDependenciesResponseObject, error)
	// Recursos dependentes
	// (GET /vertices/{key}/dependents)
	GetVertexDependents(ctx context.Context, request GetVertexDependentsRequestObject) (GetVertexDependentsResponseObject, error)
	// Vizinhos
	// (GET /vertices/{key}/neighbors)
	GetVertexNeighbors(ctx context.Context, request GetVertexNeighborsRequestObject) (GetVertexNeighborsResponseObject, error)
	// Caminho entre dois recursos
	// (GET /vertices/{key}/path/{target})
	GetPath(ctx context.Context, request GetPathRequestObject) (GetPathResponseObject, error)
	// Marcar recurso como não saudável
	// (POST /vertices/{key}/unhealthy)
	MarkVertexUnhealthy(ctx context.Context, request MarkVertexUnhealthyRequestObject) (MarkVertexUnhealthyResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Summary operation middleware
func (sh *strictHandler) Summary(w http.ResponseWriter, r *http.Request) {
	var request SummaryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Summary(ctx, request.(SummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Summary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SummaryResponseObject); ok {
		if err := validResponse.VisitSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// ClearHealthStatus operation middleware
func (sh *strictHandler) ClearHealthStatus(w http.ResponseWriter, r *http.Request) {
	var request ClearHealthStatusRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.ClearHealthStatus(ctx, request.(ClearHealthStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ClearHealthStatus")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(ClearHealthStatusResponseObject); ok {
		if err := validResponse.VisitClearHealthStatusResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertex operation middleware
func (sh *strictHandler) GetVertex(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertex(ctx, request.(GetVertexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexResponseObject); ok {
		if err := validResponse.VisitGetVertexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependencies operation middleware
func (sh *strictHandler) GetVertexDependencies(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependenciesParams) {
	var request GetVertexDependenciesRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependencies(ctx, request.(GetVertexDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependenciesResponseObject); ok {
		if err := validResponse.VisitGetVertexDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependents operation middleware
func (sh *strictHandler) GetVertexDependents(w http.ResponseWriter, r *http.Request, key Key, params GetVertexDependentsParams) {
	var request GetVertexDependentsRequestObject

	request.Key = key
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependents(ctx, request.(GetVertexDependentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependentsResponseObject); ok {
		if err := validResponse.VisitGetVertexDependentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexNeighbors operation middleware
func (sh *strictHandler) GetVertexNeighbors(w http.ResponseWriter, r *http.Request, key Key) {
	var request GetVertexNeighborsRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexNeighbors(ctx, request.(GetVertexNeighborsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexNeighbors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexNeighborsResponseObject); ok {
		if err := validResponse.VisitGetVertexNeighborsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPath operation middleware
func (sh *strictHandler) GetPath(w http.ResponseWriter, r *http.Request, key Key, target string) {
	var request GetPathRequestObject

	request.Key = key
	request.Target = target

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPath(ctx, request.(GetPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPathResponseObject); ok {
		if err := validResponse.VisitGetPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// MarkVertexUnhealthy operation middleware
func (sh *strictHandler) MarkVertexUnhealthy(w http.ResponseWriter, r *http.Request, key Key) {
	var request MarkVertexUnhealthyRequestObject

	request.Key = key

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.MarkVertexUnhealthy(ctx, request.(MarkVertexUnhealthyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkVertexUnhealthy")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(MarkVertexUnhealthyResponseObject); ok {
		if err := validResponse.VisitMarkVertexUnhealthyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
