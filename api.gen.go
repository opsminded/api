//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerHttpAuthenticationScopes = "bearerHttpAuthentication.Scopes"
)

// Edge Um relacionamento entre recursos
type Edge struct {
	// Class Classe ou Categoria do relacionamento
	Class *string `json:"class,omitempty"`

	// Destination Label único do recurso de destino
	Destination *string `json:"destination,omitempty"`

	// Label Nome do relacionamento que será exibido
	Label *string `json:"label,omitempty"`

	// Source Label único do recurso de origem
	Source *string `json:"source,omitempty"`
}

// Subgraph Recursos e seus relacionamentos apresentados de forma útil para consumo e visualização.
type Subgraph struct {
	// Edges Lista de relacionamentos que devem ser exibidos no grafo
	Edges *[]Edge `json:"edges,omitempty"`

	// Highlights Elementos que devem ser destacados no grafo
	Highlights *[]Vertex `json:"highlights,omitempty"`

	// Principal Um ativo de TI
	Principal *Vertex `json:"principal,omitempty"`

	// Title Nome que será exibido para a sessão do grafo
	Title *string `json:"title,omitempty"`

	// Vertices Lista de recursos que devem ser exibidos no grafo
	Vertices *[]Vertex `json:"vertices,omitempty"`
}

// Summary Um sumário sobre o estado da infraestrutura
type Summary struct {
	// TotalVertices O número total de recursos presentes na base
	TotalVertices *int `json:"total_vertices,omitempty"`

	// UnhealthyVertices Lista de recursos não saudáveis
	UnhealthyVertices *[]Vertex `json:"unhealthy_vertices,omitempty"`
}

// Vertex Um ativo de TI
type Vertex struct {
	// Class Classe ou Categoria do recurso
	Class *string `json:"class,omitempty"`

	// Health Saúde do recurso. Um recurso pode não estar saudável por causa de um de suas dependências.
	Health *bool `json:"health,omitempty"`

	// Label Nome que será exibido
	Label *string `json:"label,omitempty"`
}

// Label defines model for label.
type Label = string

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

// GetVertexDependantsParams defines parameters for GetVertexDependants.
type GetVertexDependantsParams struct {
	// All Se verdadeiro, retorna todos os dependentes do recurso, mesmo que não estejam conectados diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// GetVertexDependenciesParams defines parameters for GetVertexDependencies.
type GetVertexDependenciesParams struct {
	// All Se verdadeiro, retorna todas as dependências do recurso, mesmo que não estejam conectadas diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(w http.ResponseWriter, r *http.Request)
	// Detalhes de um recurso
	// (GET /vertices/{label})
	GetVertex(w http.ResponseWriter, r *http.Request, label Label)
	// Recursos dependentes
	// (GET /vertices/{label}/dependants)
	GetVertexDependants(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependantsParams)
	// Dependencias de um recurso
	// (GET /vertices/{label}/dependencies)
	GetVertexDependencies(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependenciesParams)
	// Trilhas
	// (GET /vertices/{label}/lineages)
	GetVertexLineages(w http.ResponseWriter, r *http.Request, label Label)
	// Vizinhos
	// (GET /vertices/{label}/neighbors)
	GetVertexNeighbors(w http.ResponseWriter, r *http.Request, label Label)
	// Caminho entre dois recursos
	// (GET /vertices/{label}/path/{destination})
	GetPath(w http.ResponseWriter, r *http.Request, label Label, destination string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Summary operation middleware
func (siw *ServerInterfaceWrapper) Summary(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Summary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertex operation middleware
func (siw *ServerInterfaceWrapper) GetVertex(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertex(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependants operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependants(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependantsParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependants(w, r, label, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependencies operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependencies(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependenciesParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependencies(w, r, label, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexLineages operation middleware
func (siw *ServerInterfaceWrapper) GetVertexLineages(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexLineages(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexNeighbors operation middleware
func (siw *ServerInterfaceWrapper) GetVertexNeighbors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexNeighbors(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPath operation middleware
func (siw *ServerInterfaceWrapper) GetPath(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	// ------------- Path parameter "destination" -------------
	var destination string

	err = runtime.BindStyledParameterWithOptions("simple", "destination", r.PathValue("destination"), &destination, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destination", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPath(w, r, label, destination)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/summary", wrapper.Summary)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}", wrapper.GetVertex)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/dependants", wrapper.GetVertexDependants)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/dependencies", wrapper.GetVertexDependencies)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/lineages", wrapper.GetVertexLineages)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/neighbors", wrapper.GetVertexNeighbors)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/path/{destination}", wrapper.GetPath)

	return m
}

type InternalServerErrorJSONResponse struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

type InvalidRequestJSONResponse struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

type NotFoundJSONResponse struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

type UnauthorizedJSONResponse struct {
	// Code Código do erro
	Code *int `json:"code,omitempty"`

	// Error Mensagem de erro
	Error *string `json:"error,omitempty"`
}

type SummaryRequestObject struct {
}

type SummaryResponseObject interface {
	VisitSummaryResponse(w http.ResponseWriter) error
}

type Summary200JSONResponse Summary

func (response Summary200JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Summary401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Summary401JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Summary500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Summary500JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexResponseObject interface {
	VisitGetVertexResponse(w http.ResponseWriter) error
}

type GetVertex200JSONResponse Vertex

func (response GetVertex200JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertex401JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertex404JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertex422JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertex500JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependantsRequestObject struct {
	Label  Label `json:"label"`
	Params GetVertexDependantsParams
}

type GetVertexDependantsResponseObject interface {
	VisitGetVertexDependantsResponse(w http.ResponseWriter) error
}

type GetVertexDependants200JSONResponse Subgraph

func (response GetVertexDependants200JSONResponse) VisitGetVertexDependantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependants401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependants401JSONResponse) VisitGetVertexDependantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependants404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependants404JSONResponse) VisitGetVertexDependantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependants422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependants422JSONResponse) VisitGetVertexDependantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependants500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependants500JSONResponse) VisitGetVertexDependantsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependenciesRequestObject struct {
	Label  Label `json:"label"`
	Params GetVertexDependenciesParams
}

type GetVertexDependenciesResponseObject interface {
	VisitGetVertexDependenciesResponse(w http.ResponseWriter) error
}

type GetVertexDependencies200JSONResponse Subgraph

func (response GetVertexDependencies200JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependencies401JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependencies404JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependencies422JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependencies500JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineagesRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexLineagesResponseObject interface {
	VisitGetVertexLineagesResponse(w http.ResponseWriter) error
}

type GetVertexLineages200JSONResponse Subgraph

func (response GetVertexLineages200JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexLineages401JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexLineages404JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexLineages422JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexLineages500JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighborsRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexNeighborsResponseObject interface {
	VisitGetVertexNeighborsResponse(w http.ResponseWriter) error
}

type GetVertexNeighbors200JSONResponse Subgraph

func (response GetVertexNeighbors200JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexNeighbors401JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexNeighbors404JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexNeighbors422JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexNeighbors500JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPathRequestObject struct {
	Label       Label  `json:"label"`
	Destination string `json:"destination"`
}

type GetPathResponseObject interface {
	VisitGetPathResponse(w http.ResponseWriter) error
}

type GetPath200JSONResponse Subgraph

func (response GetPath200JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPath401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetPath401JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPath404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPath404JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPath422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetPath422JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetPath500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPath500JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(ctx context.Context, request SummaryRequestObject) (SummaryResponseObject, error)
	// Detalhes de um recurso
	// (GET /vertices/{label})
	GetVertex(ctx context.Context, request GetVertexRequestObject) (GetVertexResponseObject, error)
	// Recursos dependentes
	// (GET /vertices/{label}/dependants)
	GetVertexDependants(ctx context.Context, request GetVertexDependantsRequestObject) (GetVertexDependantsResponseObject, error)
	// Dependencias de um recurso
	// (GET /vertices/{label}/dependencies)
	GetVertexDependencies(ctx context.Context, request GetVertexDependenciesRequestObject) (GetVertexDependenciesResponseObject, error)
	// Trilhas
	// (GET /vertices/{label}/lineages)
	GetVertexLineages(ctx context.Context, request GetVertexLineagesRequestObject) (GetVertexLineagesResponseObject, error)
	// Vizinhos
	// (GET /vertices/{label}/neighbors)
	GetVertexNeighbors(ctx context.Context, request GetVertexNeighborsRequestObject) (GetVertexNeighborsResponseObject, error)
	// Caminho entre dois recursos
	// (GET /vertices/{label}/path/{destination})
	GetPath(ctx context.Context, request GetPathRequestObject) (GetPathResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Summary operation middleware
func (sh *strictHandler) Summary(w http.ResponseWriter, r *http.Request) {
	var request SummaryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Summary(ctx, request.(SummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Summary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SummaryResponseObject); ok {
		if err := validResponse.VisitSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertex operation middleware
func (sh *strictHandler) GetVertex(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertex(ctx, request.(GetVertexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexResponseObject); ok {
		if err := validResponse.VisitGetVertexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependants operation middleware
func (sh *strictHandler) GetVertexDependants(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependantsParams) {
	var request GetVertexDependantsRequestObject

	request.Label = label
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependants(ctx, request.(GetVertexDependantsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependants")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependantsResponseObject); ok {
		if err := validResponse.VisitGetVertexDependantsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependencies operation middleware
func (sh *strictHandler) GetVertexDependencies(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependenciesParams) {
	var request GetVertexDependenciesRequestObject

	request.Label = label
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependencies(ctx, request.(GetVertexDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependenciesResponseObject); ok {
		if err := validResponse.VisitGetVertexDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexLineages operation middleware
func (sh *strictHandler) GetVertexLineages(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexLineagesRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexLineages(ctx, request.(GetVertexLineagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexLineages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexLineagesResponseObject); ok {
		if err := validResponse.VisitGetVertexLineagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexNeighbors operation middleware
func (sh *strictHandler) GetVertexNeighbors(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexNeighborsRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexNeighbors(ctx, request.(GetVertexNeighborsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexNeighbors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexNeighborsResponseObject); ok {
		if err := validResponse.VisitGetVertexNeighborsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPath operation middleware
func (sh *strictHandler) GetPath(w http.ResponseWriter, r *http.Request, label Label, destination string) {
	var request GetPathRequestObject

	request.Label = label
	request.Destination = destination

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPath(ctx, request.(GetPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPathResponseObject); ok {
		if err := validResponse.VisitGetPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
