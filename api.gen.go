//go:build go1.22

// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

const (
	BearerHttpAuthenticationScopes = "bearerHttpAuthentication.Scopes"
)

// Edge Um relacionamento entre recursos
type Edge struct {
	// Class Classe ou Categoria do relacionamento
	Class string `json:"class"`

	// Destination Label único do recurso de destino
	Destination string `json:"destination"`

	// Label Nome do relacionamento que será exibido
	Label string `json:"label"`

	// Source Label único do recurso de origem
	Source string `json:"source"`
}

// Subgraph Recursos e seus relacionamentos apresentados de forma útil para consumo e visualização.
type Subgraph struct {
	// All Se verdadeiro, retorna todos os itens do grafo, mesmo que não estejam conectados diretamente.
	All bool `json:"all"`

	// Edges Lista de relacionamentos que devem ser exibidos no grafo
	Edges []Edge `json:"edges"`

	// Highlights Elementos que devem ser destacados no grafo
	Highlights []Vertex `json:"highlights"`

	// Principal Um ativo de TI
	Principal Vertex `json:"principal"`

	// Title Nome que será exibido para a sessão do grafo
	Title string `json:"title"`

	// Vertices Lista de recursos que devem ser exibidos no grafo
	Vertices []Vertex `json:"vertices"`
}

// Summary Um sumário sobre o estado da infraestrutura
type Summary struct {
	// TotalEdges O número total de relacionamentos presentes na base
	TotalEdges int `json:"total_edges"`

	// TotalVertices O número total de recursos presentes na base
	TotalVertices int `json:"total_vertices"`

	// UnhealthyVertices Lista de recursos não saudáveis
	UnhealthyVertices []Vertex `json:"unhealthy_vertices"`
}

// Vertex Um ativo de TI
type Vertex struct {
	// Healthy Saúde do recurso. Um recurso pode não estar saudável por causa de um de suas dependências.
	Healthy bool `json:"healthy"`

	// Label Nome que será exibido
	Label string `json:"label"`

	// LastCheck O timestamp da última verificação
	LastCheck string `json:"last_check"`
}

// Label defines model for label.
type Label = string

// InternalServerError defines model for InternalServerError.
type InternalServerError struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// InvalidRequest defines model for InvalidRequest.
type InvalidRequest struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// NotFound defines model for NotFound.
type NotFound struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// Unauthorized defines model for Unauthorized.
type Unauthorized struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

// GetVertexDependenciesParams defines parameters for GetVertexDependencies.
type GetVertexDependenciesParams struct {
	// All Se verdadeiro, retorna todas as dependências do recurso, mesmo que não estejam conectadas diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// GetVertexDependentsParams defines parameters for GetVertexDependents.
type GetVertexDependentsParams struct {
	// All Se verdadeiro, retorna todos os dependentes do recurso, mesmo que não estejam conectados diretamente.
	All *bool `form:"all,omitempty" json:"all,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(w http.ResponseWriter, r *http.Request)
	// Detalhes de um recurso
	// (GET /vertices/{label})
	GetVertex(w http.ResponseWriter, r *http.Request, label Label)
	// Dependencias de um recurso
	// (GET /vertices/{label}/dependencies)
	GetVertexDependencies(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependenciesParams)
	// Recursos dependentes
	// (GET /vertices/{label}/dependents)
	GetVertexDependents(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependentsParams)
	// Trilhas
	// (GET /vertices/{label}/lineages)
	GetVertexLineages(w http.ResponseWriter, r *http.Request, label Label)
	// Vizinhos
	// (GET /vertices/{label}/neighbors)
	GetVertexNeighbors(w http.ResponseWriter, r *http.Request, label Label)
	// Caminho entre dois recursos
	// (GET /vertices/{label}/path/{destination})
	GetPath(w http.ResponseWriter, r *http.Request, label Label, destination string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// Summary operation middleware
func (siw *ServerInterfaceWrapper) Summary(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.Summary(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertex operation middleware
func (siw *ServerInterfaceWrapper) GetVertex(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertex(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependencies operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependencies(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependenciesParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependencies(w, r, label, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexDependents operation middleware
func (siw *ServerInterfaceWrapper) GetVertexDependents(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	// Parameter object where we will unmarshal all parameters from the context
	var params GetVertexDependentsParams

	// ------------- Optional query parameter "all" -------------

	err = runtime.BindQueryParameter("form", true, false, "all", r.URL.Query(), &params.All)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "all", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexDependents(w, r, label, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexLineages operation middleware
func (siw *ServerInterfaceWrapper) GetVertexLineages(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexLineages(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetVertexNeighbors operation middleware
func (siw *ServerInterfaceWrapper) GetVertexNeighbors(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetVertexNeighbors(w, r, label)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetPath operation middleware
func (siw *ServerInterfaceWrapper) GetPath(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "label" -------------
	var label Label

	err = runtime.BindStyledParameterWithOptions("simple", "label", r.PathValue("label"), &label, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "label", Err: err})
		return
	}

	// ------------- Path parameter "destination" -------------
	var destination string

	err = runtime.BindStyledParameterWithOptions("simple", "destination", r.PathValue("destination"), &destination, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "destination", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerHttpAuthenticationScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetPath(w, r, label, destination)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/summary", wrapper.Summary)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}", wrapper.GetVertex)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/dependencies", wrapper.GetVertexDependencies)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/dependents", wrapper.GetVertexDependents)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/lineages", wrapper.GetVertexLineages)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/neighbors", wrapper.GetVertexNeighbors)
	m.HandleFunc("GET "+options.BaseURL+"/vertices/{label}/path/{destination}", wrapper.GetPath)

	return m
}

type InternalServerErrorJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type InvalidRequestJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type NotFoundJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type UnauthorizedJSONResponse struct {
	// Code Código do erro
	Code int `json:"code"`

	// Error Mensagem de erro
	Error string `json:"error"`
}

type SummaryRequestObject struct {
}

type SummaryResponseObject interface {
	VisitSummaryResponse(w http.ResponseWriter) error
}

type Summary200JSONResponse Summary

func (response Summary200JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type Summary401JSONResponse struct{ UnauthorizedJSONResponse }

func (response Summary401JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type Summary500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response Summary500JSONResponse) VisitSummaryResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexResponseObject interface {
	VisitGetVertexResponse(w http.ResponseWriter) error
}

type GetVertex200JSONResponse Vertex

func (response GetVertex200JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertex401JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertex404JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertex422JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertex500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertex500JSONResponse) VisitGetVertexResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependenciesRequestObject struct {
	Label  Label `json:"label"`
	Params GetVertexDependenciesParams
}

type GetVertexDependenciesResponseObject interface {
	VisitGetVertexDependenciesResponse(w http.ResponseWriter) error
}

type GetVertexDependencies200JSONResponse Subgraph

func (response GetVertexDependencies200JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependencies401JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependencies404JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependencies422JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependencies500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependencies500JSONResponse) VisitGetVertexDependenciesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependentsRequestObject struct {
	Label  Label `json:"label"`
	Params GetVertexDependentsParams
}

type GetVertexDependentsResponseObject interface {
	VisitGetVertexDependentsResponse(w http.ResponseWriter) error
}

type GetVertexDependents200JSONResponse Subgraph

func (response GetVertexDependents200JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexDependents401JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexDependents404JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexDependents422JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexDependents500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexDependents500JSONResponse) VisitGetVertexDependentsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineagesRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexLineagesResponseObject interface {
	VisitGetVertexLineagesResponse(w http.ResponseWriter) error
}

type GetVertexLineages200JSONResponse Subgraph

func (response GetVertexLineages200JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexLineages401JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexLineages404JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexLineages422JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexLineages500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexLineages500JSONResponse) VisitGetVertexLineagesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighborsRequestObject struct {
	Label Label `json:"label"`
}

type GetVertexNeighborsResponseObject interface {
	VisitGetVertexNeighborsResponse(w http.ResponseWriter) error
}

type GetVertexNeighbors200JSONResponse Subgraph

func (response GetVertexNeighbors200JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetVertexNeighbors401JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors404JSONResponse struct{ NotFoundJSONResponse }

func (response GetVertexNeighbors404JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetVertexNeighbors422JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetVertexNeighbors500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetVertexNeighbors500JSONResponse) VisitGetVertexNeighborsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetPathRequestObject struct {
	Label       Label  `json:"label"`
	Destination string `json:"destination"`
}

type GetPathResponseObject interface {
	VisitGetPathResponse(w http.ResponseWriter) error
}

type GetPath200JSONResponse Subgraph

func (response GetPath200JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetPath401JSONResponse struct{ UnauthorizedJSONResponse }

func (response GetPath401JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetPath404JSONResponse struct{ NotFoundJSONResponse }

func (response GetPath404JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetPath422JSONResponse struct{ InvalidRequestJSONResponse }

func (response GetPath422JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(422)

	return json.NewEncoder(w).Encode(response)
}

type GetPath500JSONResponse struct {
	InternalServerErrorJSONResponse
}

func (response GetPath500JSONResponse) VisitGetPathResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Resumo da infraestrutura
	// (GET /summary)
	Summary(ctx context.Context, request SummaryRequestObject) (SummaryResponseObject, error)
	// Detalhes de um recurso
	// (GET /vertices/{label})
	GetVertex(ctx context.Context, request GetVertexRequestObject) (GetVertexResponseObject, error)
	// Dependencias de um recurso
	// (GET /vertices/{label}/dependencies)
	GetVertexDependencies(ctx context.Context, request GetVertexDependenciesRequestObject) (GetVertexDependenciesResponseObject, error)
	// Recursos dependentes
	// (GET /vertices/{label}/dependents)
	GetVertexDependents(ctx context.Context, request GetVertexDependentsRequestObject) (GetVertexDependentsResponseObject, error)
	// Trilhas
	// (GET /vertices/{label}/lineages)
	GetVertexLineages(ctx context.Context, request GetVertexLineagesRequestObject) (GetVertexLineagesResponseObject, error)
	// Vizinhos
	// (GET /vertices/{label}/neighbors)
	GetVertexNeighbors(ctx context.Context, request GetVertexNeighborsRequestObject) (GetVertexNeighborsResponseObject, error)
	// Caminho entre dois recursos
	// (GET /vertices/{label}/path/{destination})
	GetPath(ctx context.Context, request GetPathRequestObject) (GetPathResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// Summary operation middleware
func (sh *strictHandler) Summary(w http.ResponseWriter, r *http.Request) {
	var request SummaryRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.Summary(ctx, request.(SummaryRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Summary")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(SummaryResponseObject); ok {
		if err := validResponse.VisitSummaryResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertex operation middleware
func (sh *strictHandler) GetVertex(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertex(ctx, request.(GetVertexRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertex")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexResponseObject); ok {
		if err := validResponse.VisitGetVertexResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependencies operation middleware
func (sh *strictHandler) GetVertexDependencies(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependenciesParams) {
	var request GetVertexDependenciesRequestObject

	request.Label = label
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependencies(ctx, request.(GetVertexDependenciesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependencies")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependenciesResponseObject); ok {
		if err := validResponse.VisitGetVertexDependenciesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexDependents operation middleware
func (sh *strictHandler) GetVertexDependents(w http.ResponseWriter, r *http.Request, label Label, params GetVertexDependentsParams) {
	var request GetVertexDependentsRequestObject

	request.Label = label
	request.Params = params

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexDependents(ctx, request.(GetVertexDependentsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexDependents")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexDependentsResponseObject); ok {
		if err := validResponse.VisitGetVertexDependentsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexLineages operation middleware
func (sh *strictHandler) GetVertexLineages(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexLineagesRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexLineages(ctx, request.(GetVertexLineagesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexLineages")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexLineagesResponseObject); ok {
		if err := validResponse.VisitGetVertexLineagesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetVertexNeighbors operation middleware
func (sh *strictHandler) GetVertexNeighbors(w http.ResponseWriter, r *http.Request, label Label) {
	var request GetVertexNeighborsRequestObject

	request.Label = label

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetVertexNeighbors(ctx, request.(GetVertexNeighborsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetVertexNeighbors")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetVertexNeighborsResponseObject); ok {
		if err := validResponse.VisitGetVertexNeighborsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetPath operation middleware
func (sh *strictHandler) GetPath(w http.ResponseWriter, r *http.Request, label Label, destination string) {
	var request GetPathRequestObject

	request.Label = label
	request.Destination = destination

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetPath(ctx, request.(GetPathRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetPath")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetPathResponseObject); ok {
		if err := validResponse.VisitGetPathResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
